{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "properties": {
        "clusterDomain": {
            "default": "cluster.local",
            "description": "Default Kubernetes cluster domain",
            "required": [],
            "title": "clusterDomain"
        },
        "common": {
            "additionalProperties": true,
            "description": "Parameters for bitnami.common dependency",
            "required": [],
            "title": "common"
        },
        "commonAnnotations": {
            "additionalProperties": true,
            "description": "Annotations to add to all deployed objects",
            "required": [],
            "title": "commonAnnotations"
        },
        "commonLabels": {
            "additionalProperties": true,
            "description": "Labels to add to all deployed objects",
            "required": [],
            "title": "commonLabels"
        },
        "extraDeploy": {
            "description": "Array of extra objects to deploy with the release",
            "items": {
                "required": [],
                "type": [
                    "string",
                    "object"
                ]
            },
            "required": [],
            "title": "extraDeploy"
        },
        "fullnameOverride": {
            "default": "",
            "description": "String to fully override common.names.fullname",
            "required": [],
            "title": "fullnameOverride"
        },
        "gateway": {
            "additionalProperties": false,
            "default": "See below",
            "description": "Gateway configuration",
            "properties": {
                "annotations": {
                    "additionalProperties": true,
                    "description": "Additional annotations provided to the Gateway resource",
                    "required": [],
                    "title": "annotations"
                },
                "enabled": {
                    "default": "true",
                    "description": "Deploy resources related to Gateway",
                    "required": [],
                    "title": "enabled"
                },
                "fullnameOverride": {
                    "default": "",
                    "description": "String to fully override gateway.fullname",
                    "required": [],
                    "title": "fullnameOverride"
                },
                "gatewayClassName": {
                    "default": "kgateway",
                    "description": "Gateway class that determines the backend used Currently supported values: \"kgateway\" or \"istio\"",
                    "required": [],
                    "title": "gatewayClassName"
                },
                "kGatewayParameters": {
                    "additionalProperties": false,
                    "description": "Special parameters applied to kGateway via GatewayParameters resource",
                    "properties": {
                        "proxyUID": {
                            "default": false,
                            "description": " type: [number, boolean] @schema",
                            "required": [],
                            "title": "proxyUID",
                            "type": [
                                "number",
                                "boolean"
                            ]
                        }
                    },
                    "required": [],
                    "title": "kGatewayParameters",
                    "type": "object"
                },
                "listeners": {
                    "description": " items:  type: object  properties:    name:      description: Name is the name of the Listener. This name MUST be unique within a Gateway      type: string    path:      description: Path to expose via Ingress      type: string    port:      description: Port is the network port. Multiple listeners may use the same port, subject to the Listener compatibility rules      type: integer      minimum: 1      maximum: 65535    protocol:      description: Protocol specifies the network protocol this listener expects to receive      type: string @schema Set of listeners exposed via the Gateway, also propagated to the Ingress if enabled",
                    "items": {
                        "properties": {
                            "name": {
                                "description": "Name is the name of the Listener. This name MUST be unique within a Gateway",
                                "required": [],
                                "type": "string"
                            },
                            "path": {
                                "description": "Path to expose via Ingress",
                                "required": [],
                                "type": "string"
                            },
                            "port": {
                                "description": "Port is the network port. Multiple listeners may use the same port, subject to the Listener compatibility rules",
                                "maximum": 65535,
                                "minimum": 1,
                                "required": [],
                                "type": "integer"
                            },
                            "protocol": {
                                "description": "Protocol specifies the network protocol this listener expects to receive",
                                "required": [],
                                "type": "string"
                            }
                        },
                        "required": [],
                        "type": "object"
                    },
                    "required": [],
                    "title": "listeners"
                },
                "nameOverride": {
                    "default": "",
                    "description": "String to partially override gateway.fullname",
                    "required": [],
                    "title": "nameOverride"
                },
                "serviceType": {
                    "default": "NodePort",
                    "description": "Gateway's service type. Ingress is only available if the service type is set to NodePort. Accepted values: [\"LoadBalancer\", \"NodePort\"]",
                    "required": [],
                    "title": "serviceType"
                }
            },
            "required": [],
            "title": "gateway"
        },
        "global": {
            "additionalProperties": false,
            "default": "See below",
            "description": "Global parameters Global Docker image parameters Please, note that this will override the image parameters, including dependencies, configured to use the global value Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass",
            "properties": {
                "imagePullSecrets": {
                    "description": "Global Docker registry secret names as an array </br> E.g. `imagePullSecrets: [myRegistryKeySecretName]`",
                    "items": {
                        "required": [],
                        "type": "string"
                    },
                    "required": [],
                    "title": "imagePullSecrets"
                },
                "imageRegistry": {
                    "default": "",
                    "description": "Global Docker image registry",
                    "required": [],
                    "title": "imageRegistry"
                },
                "security": {
                    "additionalProperties": false,
                    "properties": {
                        "allowInsecureImages": {
                            "default": true,
                            "required": [],
                            "title": "allowInsecureImages",
                            "type": "boolean"
                        }
                    },
                    "required": [],
                    "title": "security",
                    "type": "object"
                }
            },
            "required": [],
            "title": "global"
        },
        "ingress": {
            "additionalProperties": false,
            "default": "See below",
            "description": "Ingress configuration",
            "properties": {
                "annotations": {
                    "additionalProperties": true,
                    "description": "Additional annotations for the Ingress resource",
                    "required": [],
                    "title": "annotations"
                },
                "clusterRouterBase": {
                    "default": "",
                    "description": "used as part of the host dirivation if not specified from OCP cluster domain (dont edit)",
                    "required": [],
                    "title": "clusterRouterBase"
                },
                "enabled": {
                    "default": "true",
                    "description": "Deploy Ingress",
                    "required": [],
                    "title": "enabled"
                },
                "extraHosts": {
                    "description": "List of additional hostnames to be covered with this ingress record (e.g. a CNAME) <!-- E.g. extraHosts:   - name: llm-d.env.example.com     path: / (Optional)     pathType: Prefix (Optional)     port: 7007 (Optional) -->",
                    "items": {
                        "required": []
                    },
                    "required": [],
                    "title": "extraHosts"
                },
                "extraTls": {
                    "description": "The TLS configuration for additional hostnames to be covered with this ingress record. <br /> Ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls <!-- E.g. extraTls:   - hosts:     - llm-d.env.example.com     secretName: llm-d-env -->",
                    "items": {
                        "description": "IngressTLS describes the transport layer security associated with an ingress.",
                        "properties": {
                            "hosts": {
                                "description": "hosts is a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "x-kubernetes-list-type": "atomic"
                            },
                            "secretName": {
                                "description": "secretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \"Host\" header field used by an IngressRule, the SNI host is used for termination and value of the \"Host\" header is used for routing.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "required": [],
                    "title": "extraTls"
                },
                "host": {
                    "default": "",
                    "description": "Hostname to be used to expose the NodePort service to the inferencing gateway",
                    "required": [],
                    "title": "host"
                },
                "ingressClassName": {
                    "default": "",
                    "description": "Name of the IngressClass cluster resource which defines which controller will implement the resource (e.g nginx)",
                    "required": [],
                    "title": "ingressClassName"
                },
                "path": {
                    "default": "/",
                    "description": "Path to be used to expose the full route to access the inferencing gateway",
                    "required": [],
                    "title": "path"
                },
                "tls": {
                    "additionalProperties": false,
                    "description": "Ingress TLS parameters",
                    "properties": {
                        "enabled": {
                            "default": "false",
                            "description": "Enable TLS configuration for the host defined at `ingress.host` parameter",
                            "required": [],
                            "title": "enabled"
                        },
                        "secretName": {
                            "default": "",
                            "description": "The name to which the TLS Secret will be called",
                            "required": [],
                            "title": "secretName"
                        }
                    },
                    "required": [],
                    "title": "tls"
                }
            },
            "required": [],
            "title": "ingress"
        },
        "kubeVersion": {
            "default": "",
            "description": "Override Kubernetes version",
            "required": [],
            "title": "kubeVersion"
        },
        "modelservice": {
            "additionalProperties": false,
            "default": "See below",
            "description": "Model service controller configuration",
            "properties": {
                "affinity": {
                    "additionalProperties": false,
                    "description": "Affinity for pod assignment <br /> Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity",
                    "properties": {
                        "nodeAffinity": {
                            "description": "Node affinity is a group of node affinity scheduling rules.",
                            "properties": {
                                "preferredDuringSchedulingIgnoredDuringExecution": {
                                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
                                    "items": {
                                        "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                                        "properties": {
                                            "preference": {
                                                "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                                                "properties": {
                                                    "matchExpressions": {
                                                        "description": "A list of node selector requirements by node's labels.",
                                                        "items": {
                                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                            "properties": {
                                                                "key": {
                                                                    "description": "The label key that the selector applies to.",
                                                                    "type": "string"
                                                                },
                                                                "operator": {
                                                                    "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                                    "type": "string"
                                                                },
                                                                "values": {
                                                                    "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array",
                                                                    "x-kubernetes-list-type": "atomic"
                                                                }
                                                            },
                                                            "required": [
                                                                "key",
                                                                "operator"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "matchFields": {
                                                        "description": "A list of node selector requirements by node's fields.",
                                                        "items": {
                                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                            "properties": {
                                                                "key": {
                                                                    "description": "The label key that the selector applies to.",
                                                                    "type": "string"
                                                                },
                                                                "operator": {
                                                                    "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                                    "type": "string"
                                                                },
                                                                "values": {
                                                                    "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array",
                                                                    "x-kubernetes-list-type": "atomic"
                                                                }
                                                            },
                                                            "required": [
                                                                "key",
                                                                "operator"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    }
                                                },
                                                "type": "object",
                                                "x-kubernetes-map-type": "atomic"
                                            },
                                            "weight": {
                                                "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "required": [
                                            "weight",
                                            "preference"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array",
                                    "x-kubernetes-list-type": "atomic"
                                },
                                "requiredDuringSchedulingIgnoredDuringExecution": {
                                    "description": "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.",
                                    "properties": {
                                        "nodeSelectorTerms": {
                                            "description": "Required. A list of node selector terms. The terms are ORed.",
                                            "items": {
                                                "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                                                "properties": {
                                                    "matchExpressions": {
                                                        "description": "A list of node selector requirements by node's labels.",
                                                        "items": {
                                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                            "properties": {
                                                                "key": {
                                                                    "description": "The label key that the selector applies to.",
                                                                    "type": "string"
                                                                },
                                                                "operator": {
                                                                    "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                                    "type": "string"
                                                                },
                                                                "values": {
                                                                    "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array",
                                                                    "x-kubernetes-list-type": "atomic"
                                                                }
                                                            },
                                                            "required": [
                                                                "key",
                                                                "operator"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "matchFields": {
                                                        "description": "A list of node selector requirements by node's fields.",
                                                        "items": {
                                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                            "properties": {
                                                                "key": {
                                                                    "description": "The label key that the selector applies to.",
                                                                    "type": "string"
                                                                },
                                                                "operator": {
                                                                    "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                                    "type": "string"
                                                                },
                                                                "values": {
                                                                    "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array",
                                                                    "x-kubernetes-list-type": "atomic"
                                                                }
                                                            },
                                                            "required": [
                                                                "key",
                                                                "operator"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    }
                                                },
                                                "type": "object",
                                                "x-kubernetes-map-type": "atomic"
                                            },
                                            "type": "array",
                                            "x-kubernetes-list-type": "atomic"
                                        }
                                    },
                                    "required": [
                                        "nodeSelectorTerms"
                                    ],
                                    "type": "object",
                                    "x-kubernetes-map-type": "atomic"
                                }
                            },
                            "type": "object"
                        },
                        "podAffinity": {
                            "description": "Pod affinity is a group of inter pod affinity scheduling rules.",
                            "properties": {
                                "preferredDuringSchedulingIgnoredDuringExecution": {
                                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                                    "items": {
                                        "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                                        "properties": {
                                            "podAffinityTerm": {
                                                "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                                "properties": {
                                                    "labelSelector": {
                                                        "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                                        "properties": {
                                                            "matchExpressions": {
                                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                                "items": {
                                                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                    "properties": {
                                                                        "key": {
                                                                            "description": "key is the label key that the selector applies to.",
                                                                            "type": "string"
                                                                        },
                                                                        "operator": {
                                                                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                            "type": "string"
                                                                        },
                                                                        "values": {
                                                                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array",
                                                                            "x-kubernetes-list-type": "atomic"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "key",
                                                                        "operator"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "matchLabels": {
                                                                "additionalProperties": {
                                                                    "type": "string"
                                                                },
                                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object",
                                                        "x-kubernetes-map-type": "atomic"
                                                    },
                                                    "matchLabelKeys": {
                                                        "description": "MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both matchLabelKeys and labelSelector. Also, matchLabelKeys cannot be set when labelSelector isn't set.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "mismatchLabelKeys": {
                                                        "description": "MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both mismatchLabelKeys and labelSelector. Also, mismatchLabelKeys cannot be set when labelSelector isn't set.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "namespaceSelector": {
                                                        "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                                        "properties": {
                                                            "matchExpressions": {
                                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                                "items": {
                                                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                    "properties": {
                                                                        "key": {
                                                                            "description": "key is the label key that the selector applies to.",
                                                                            "type": "string"
                                                                        },
                                                                        "operator": {
                                                                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                            "type": "string"
                                                                        },
                                                                        "values": {
                                                                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array",
                                                                            "x-kubernetes-list-type": "atomic"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "key",
                                                                        "operator"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "matchLabels": {
                                                                "additionalProperties": {
                                                                    "type": "string"
                                                                },
                                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object",
                                                        "x-kubernetes-map-type": "atomic"
                                                    },
                                                    "namespaces": {
                                                        "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "topologyKey": {
                                                        "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "topologyKey"
                                                ],
                                                "type": "object"
                                            },
                                            "weight": {
                                                "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "required": [
                                            "weight",
                                            "podAffinityTerm"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array",
                                    "x-kubernetes-list-type": "atomic"
                                },
                                "requiredDuringSchedulingIgnoredDuringExecution": {
                                    "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                                    "items": {
                                        "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                        "properties": {
                                            "labelSelector": {
                                                "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                                "properties": {
                                                    "matchExpressions": {
                                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                        "items": {
                                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                            "properties": {
                                                                "key": {
                                                                    "description": "key is the label key that the selector applies to.",
                                                                    "type": "string"
                                                                },
                                                                "operator": {
                                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                    "type": "string"
                                                                },
                                                                "values": {
                                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array",
                                                                    "x-kubernetes-list-type": "atomic"
                                                                }
                                                            },
                                                            "required": [
                                                                "key",
                                                                "operator"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "matchLabels": {
                                                        "additionalProperties": {
                                                            "type": "string"
                                                        },
                                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object",
                                                "x-kubernetes-map-type": "atomic"
                                            },
                                            "matchLabelKeys": {
                                                "description": "MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both matchLabelKeys and labelSelector. Also, matchLabelKeys cannot be set when labelSelector isn't set.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array",
                                                "x-kubernetes-list-type": "atomic"
                                            },
                                            "mismatchLabelKeys": {
                                                "description": "MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both mismatchLabelKeys and labelSelector. Also, mismatchLabelKeys cannot be set when labelSelector isn't set.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array",
                                                "x-kubernetes-list-type": "atomic"
                                            },
                                            "namespaceSelector": {
                                                "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                                "properties": {
                                                    "matchExpressions": {
                                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                        "items": {
                                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                            "properties": {
                                                                "key": {
                                                                    "description": "key is the label key that the selector applies to.",
                                                                    "type": "string"
                                                                },
                                                                "operator": {
                                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                    "type": "string"
                                                                },
                                                                "values": {
                                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array",
                                                                    "x-kubernetes-list-type": "atomic"
                                                                }
                                                            },
                                                            "required": [
                                                                "key",
                                                                "operator"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "matchLabels": {
                                                        "additionalProperties": {
                                                            "type": "string"
                                                        },
                                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object",
                                                "x-kubernetes-map-type": "atomic"
                                            },
                                            "namespaces": {
                                                "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array",
                                                "x-kubernetes-list-type": "atomic"
                                            },
                                            "topologyKey": {
                                                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "topologyKey"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array",
                                    "x-kubernetes-list-type": "atomic"
                                }
                            },
                            "type": "object"
                        },
                        "podAntiAffinity": {
                            "description": "Pod anti affinity is a group of inter pod anti affinity scheduling rules.",
                            "properties": {
                                "preferredDuringSchedulingIgnoredDuringExecution": {
                                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and subtracting \"weight\" from the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                                    "items": {
                                        "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                                        "properties": {
                                            "podAffinityTerm": {
                                                "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                                "properties": {
                                                    "labelSelector": {
                                                        "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                                        "properties": {
                                                            "matchExpressions": {
                                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                                "items": {
                                                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                    "properties": {
                                                                        "key": {
                                                                            "description": "key is the label key that the selector applies to.",
                                                                            "type": "string"
                                                                        },
                                                                        "operator": {
                                                                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                            "type": "string"
                                                                        },
                                                                        "values": {
                                                                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array",
                                                                            "x-kubernetes-list-type": "atomic"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "key",
                                                                        "operator"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "matchLabels": {
                                                                "additionalProperties": {
                                                                    "type": "string"
                                                                },
                                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object",
                                                        "x-kubernetes-map-type": "atomic"
                                                    },
                                                    "matchLabelKeys": {
                                                        "description": "MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both matchLabelKeys and labelSelector. Also, matchLabelKeys cannot be set when labelSelector isn't set.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "mismatchLabelKeys": {
                                                        "description": "MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both mismatchLabelKeys and labelSelector. Also, mismatchLabelKeys cannot be set when labelSelector isn't set.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "namespaceSelector": {
                                                        "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                                        "properties": {
                                                            "matchExpressions": {
                                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                                "items": {
                                                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                    "properties": {
                                                                        "key": {
                                                                            "description": "key is the label key that the selector applies to.",
                                                                            "type": "string"
                                                                        },
                                                                        "operator": {
                                                                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                            "type": "string"
                                                                        },
                                                                        "values": {
                                                                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array",
                                                                            "x-kubernetes-list-type": "atomic"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "key",
                                                                        "operator"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "matchLabels": {
                                                                "additionalProperties": {
                                                                    "type": "string"
                                                                },
                                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object",
                                                        "x-kubernetes-map-type": "atomic"
                                                    },
                                                    "namespaces": {
                                                        "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "topologyKey": {
                                                        "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "topologyKey"
                                                ],
                                                "type": "object"
                                            },
                                            "weight": {
                                                "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "required": [
                                            "weight",
                                            "podAffinityTerm"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array",
                                    "x-kubernetes-list-type": "atomic"
                                },
                                "requiredDuringSchedulingIgnoredDuringExecution": {
                                    "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                                    "items": {
                                        "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                        "properties": {
                                            "labelSelector": {
                                                "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                                "properties": {
                                                    "matchExpressions": {
                                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                        "items": {
                                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                            "properties": {
                                                                "key": {
                                                                    "description": "key is the label key that the selector applies to.",
                                                                    "type": "string"
                                                                },
                                                                "operator": {
                                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                    "type": "string"
                                                                },
                                                                "values": {
                                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array",
                                                                    "x-kubernetes-list-type": "atomic"
                                                                }
                                                            },
                                                            "required": [
                                                                "key",
                                                                "operator"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "matchLabels": {
                                                        "additionalProperties": {
                                                            "type": "string"
                                                        },
                                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object",
                                                "x-kubernetes-map-type": "atomic"
                                            },
                                            "matchLabelKeys": {
                                                "description": "MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both matchLabelKeys and labelSelector. Also, matchLabelKeys cannot be set when labelSelector isn't set.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array",
                                                "x-kubernetes-list-type": "atomic"
                                            },
                                            "mismatchLabelKeys": {
                                                "description": "MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both mismatchLabelKeys and labelSelector. Also, mismatchLabelKeys cannot be set when labelSelector isn't set.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array",
                                                "x-kubernetes-list-type": "atomic"
                                            },
                                            "namespaceSelector": {
                                                "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                                "properties": {
                                                    "matchExpressions": {
                                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                        "items": {
                                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                            "properties": {
                                                                "key": {
                                                                    "description": "key is the label key that the selector applies to.",
                                                                    "type": "string"
                                                                },
                                                                "operator": {
                                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                    "type": "string"
                                                                },
                                                                "values": {
                                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array",
                                                                    "x-kubernetes-list-type": "atomic"
                                                                }
                                                            },
                                                            "required": [
                                                                "key",
                                                                "operator"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "matchLabels": {
                                                        "additionalProperties": {
                                                            "type": "string"
                                                        },
                                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object",
                                                "x-kubernetes-map-type": "atomic"
                                            },
                                            "namespaces": {
                                                "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array",
                                                "x-kubernetes-list-type": "atomic"
                                            },
                                            "topologyKey": {
                                                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "topologyKey"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array",
                                    "x-kubernetes-list-type": "atomic"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "required": [],
                    "title": "affinity"
                },
                "annotations": {
                    "additionalProperties": true,
                    "description": "Annotations to add to all modelservice resources",
                    "required": [],
                    "title": "annotations"
                },
                "containerSecurityContext": {
                    "description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
                    "properties": {
                        "allowPrivilegeEscalation": {
                            "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.",
                            "type": "boolean"
                        },
                        "appArmorProfile": {
                            "description": "AppArmorProfile defines a pod or container's AppArmor settings.",
                            "properties": {
                                "localhostProfile": {
                                    "description": "localhostProfile indicates a profile loaded on the node that should be used. The profile must be preconfigured on the node to work. Must match the loaded name of the profile. Must be set if and only if type is \"Localhost\".",
                                    "type": "string"
                                },
                                "type": {
                                    "description": "type indicates which kind of AppArmor profile will be applied. Valid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement.",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "type"
                            ],
                            "type": "object",
                            "x-kubernetes-unions": [
                                {
                                    "discriminator": "type",
                                    "fields-to-discriminateBy": {
                                        "localhostProfile": "LocalhostProfile"
                                    }
                                }
                            ]
                        },
                        "capabilities": {
                            "description": "Adds and removes POSIX capabilities from running containers.",
                            "properties": {
                                "add": {
                                    "description": "Added capabilities",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array",
                                    "x-kubernetes-list-type": "atomic"
                                },
                                "drop": {
                                    "description": "Removed capabilities",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array",
                                    "x-kubernetes-list-type": "atomic"
                                }
                            },
                            "type": "object"
                        },
                        "privileged": {
                            "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.",
                            "type": "boolean"
                        },
                        "procMount": {
                            "description": "procMount denotes the type of proc mount to use for the containers. The default value is Default which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.",
                            "type": "string"
                        },
                        "readOnlyRootFilesystem": {
                            "description": "Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.",
                            "type": "boolean"
                        },
                        "runAsGroup": {
                            "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                            "format": "int64",
                            "type": "integer"
                        },
                        "runAsNonRoot": {
                            "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                            "type": "boolean"
                        },
                        "runAsUser": {
                            "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                            "format": "int64",
                            "type": "integer"
                        },
                        "seLinuxOptions": {
                            "description": "SELinuxOptions are the labels to be applied to the container",
                            "properties": {
                                "level": {
                                    "description": "Level is SELinux level label that applies to the container.",
                                    "type": "string"
                                },
                                "role": {
                                    "description": "Role is a SELinux role label that applies to the container.",
                                    "type": "string"
                                },
                                "type": {
                                    "description": "Type is a SELinux type label that applies to the container.",
                                    "type": "string"
                                },
                                "user": {
                                    "description": "User is a SELinux user label that applies to the container.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "seccompProfile": {
                            "description": "SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.",
                            "properties": {
                                "localhostProfile": {
                                    "description": "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is \"Localhost\". Must NOT be set for any other type.",
                                    "type": "string"
                                },
                                "type": {
                                    "description": "type indicates which kind of seccomp profile will be applied. Valid options are:\n\nLocalhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "type"
                            ],
                            "type": "object",
                            "x-kubernetes-unions": [
                                {
                                    "discriminator": "type",
                                    "fields-to-discriminateBy": {
                                        "localhostProfile": "LocalhostProfile"
                                    }
                                }
                            ]
                        },
                        "windowsOptions": {
                            "description": "WindowsSecurityContextOptions contain Windows-specific options and credentials.",
                            "properties": {
                                "gmsaCredentialSpec": {
                                    "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
                                    "type": "string"
                                },
                                "gmsaCredentialSpecName": {
                                    "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                                    "type": "string"
                                },
                                "hostProcess": {
                                    "description": "HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.",
                                    "type": "boolean"
                                },
                                "runAsUserName": {
                                    "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "decode": {
                    "additionalProperties": false,
                    "default": "See below",
                    "description": "Decode options",
                    "properties": {
                        "affinity": {
                            "additionalProperties": false,
                            "description": "Affinity for pod assignment <br /> Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity",
                            "properties": {
                                "nodeAffinity": {
                                    "description": "Node affinity is a group of node affinity scheduling rules.",
                                    "properties": {
                                        "preferredDuringSchedulingIgnoredDuringExecution": {
                                            "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
                                            "items": {
                                                "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                                                "properties": {
                                                    "preference": {
                                                        "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                                                        "properties": {
                                                            "matchExpressions": {
                                                                "description": "A list of node selector requirements by node's labels.",
                                                                "items": {
                                                                    "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                    "properties": {
                                                                        "key": {
                                                                            "description": "The label key that the selector applies to.",
                                                                            "type": "string"
                                                                        },
                                                                        "operator": {
                                                                            "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                                            "type": "string"
                                                                        },
                                                                        "values": {
                                                                            "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array",
                                                                            "x-kubernetes-list-type": "atomic"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "key",
                                                                        "operator"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "matchFields": {
                                                                "description": "A list of node selector requirements by node's fields.",
                                                                "items": {
                                                                    "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                    "properties": {
                                                                        "key": {
                                                                            "description": "The label key that the selector applies to.",
                                                                            "type": "string"
                                                                        },
                                                                        "operator": {
                                                                            "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                                            "type": "string"
                                                                        },
                                                                        "values": {
                                                                            "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array",
                                                                            "x-kubernetes-list-type": "atomic"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "key",
                                                                        "operator"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            }
                                                        },
                                                        "type": "object",
                                                        "x-kubernetes-map-type": "atomic"
                                                    },
                                                    "weight": {
                                                        "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                },
                                                "required": [
                                                    "weight",
                                                    "preference"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array",
                                            "x-kubernetes-list-type": "atomic"
                                        },
                                        "requiredDuringSchedulingIgnoredDuringExecution": {
                                            "description": "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.",
                                            "properties": {
                                                "nodeSelectorTerms": {
                                                    "description": "Required. A list of node selector terms. The terms are ORed.",
                                                    "items": {
                                                        "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                                                        "properties": {
                                                            "matchExpressions": {
                                                                "description": "A list of node selector requirements by node's labels.",
                                                                "items": {
                                                                    "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                    "properties": {
                                                                        "key": {
                                                                            "description": "The label key that the selector applies to.",
                                                                            "type": "string"
                                                                        },
                                                                        "operator": {
                                                                            "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                                            "type": "string"
                                                                        },
                                                                        "values": {
                                                                            "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array",
                                                                            "x-kubernetes-list-type": "atomic"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "key",
                                                                        "operator"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "matchFields": {
                                                                "description": "A list of node selector requirements by node's fields.",
                                                                "items": {
                                                                    "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                    "properties": {
                                                                        "key": {
                                                                            "description": "The label key that the selector applies to.",
                                                                            "type": "string"
                                                                        },
                                                                        "operator": {
                                                                            "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                                            "type": "string"
                                                                        },
                                                                        "values": {
                                                                            "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array",
                                                                            "x-kubernetes-list-type": "atomic"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "key",
                                                                        "operator"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            }
                                                        },
                                                        "type": "object",
                                                        "x-kubernetes-map-type": "atomic"
                                                    },
                                                    "type": "array",
                                                    "x-kubernetes-list-type": "atomic"
                                                }
                                            },
                                            "required": [
                                                "nodeSelectorTerms"
                                            ],
                                            "type": "object",
                                            "x-kubernetes-map-type": "atomic"
                                        }
                                    },
                                    "type": "object"
                                },
                                "podAffinity": {
                                    "description": "Pod affinity is a group of inter pod affinity scheduling rules.",
                                    "properties": {
                                        "preferredDuringSchedulingIgnoredDuringExecution": {
                                            "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                                            "items": {
                                                "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                                                "properties": {
                                                    "podAffinityTerm": {
                                                        "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                                        "properties": {
                                                            "labelSelector": {
                                                                "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                                                "properties": {
                                                                    "matchExpressions": {
                                                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                                        "items": {
                                                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                            "properties": {
                                                                                "key": {
                                                                                    "description": "key is the label key that the selector applies to.",
                                                                                    "type": "string"
                                                                                },
                                                                                "operator": {
                                                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                                    "type": "string"
                                                                                },
                                                                                "values": {
                                                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "type": "array",
                                                                                    "x-kubernetes-list-type": "atomic"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "key",
                                                                                "operator"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array",
                                                                        "x-kubernetes-list-type": "atomic"
                                                                    },
                                                                    "matchLabels": {
                                                                        "additionalProperties": {
                                                                            "type": "string"
                                                                        },
                                                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object",
                                                                "x-kubernetes-map-type": "atomic"
                                                            },
                                                            "matchLabelKeys": {
                                                                "description": "MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both matchLabelKeys and labelSelector. Also, matchLabelKeys cannot be set when labelSelector isn't set.",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "mismatchLabelKeys": {
                                                                "description": "MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both mismatchLabelKeys and labelSelector. Also, mismatchLabelKeys cannot be set when labelSelector isn't set.",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "namespaceSelector": {
                                                                "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                                                "properties": {
                                                                    "matchExpressions": {
                                                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                                        "items": {
                                                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                            "properties": {
                                                                                "key": {
                                                                                    "description": "key is the label key that the selector applies to.",
                                                                                    "type": "string"
                                                                                },
                                                                                "operator": {
                                                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                                    "type": "string"
                                                                                },
                                                                                "values": {
                                                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "type": "array",
                                                                                    "x-kubernetes-list-type": "atomic"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "key",
                                                                                "operator"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array",
                                                                        "x-kubernetes-list-type": "atomic"
                                                                    },
                                                                    "matchLabels": {
                                                                        "additionalProperties": {
                                                                            "type": "string"
                                                                        },
                                                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object",
                                                                "x-kubernetes-map-type": "atomic"
                                                            },
                                                            "namespaces": {
                                                                "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "topologyKey": {
                                                                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "topologyKey"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "weight": {
                                                        "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                },
                                                "required": [
                                                    "weight",
                                                    "podAffinityTerm"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array",
                                            "x-kubernetes-list-type": "atomic"
                                        },
                                        "requiredDuringSchedulingIgnoredDuringExecution": {
                                            "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                                            "items": {
                                                "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                                "properties": {
                                                    "labelSelector": {
                                                        "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                                        "properties": {
                                                            "matchExpressions": {
                                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                                "items": {
                                                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                    "properties": {
                                                                        "key": {
                                                                            "description": "key is the label key that the selector applies to.",
                                                                            "type": "string"
                                                                        },
                                                                        "operator": {
                                                                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                            "type": "string"
                                                                        },
                                                                        "values": {
                                                                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array",
                                                                            "x-kubernetes-list-type": "atomic"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "key",
                                                                        "operator"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "matchLabels": {
                                                                "additionalProperties": {
                                                                    "type": "string"
                                                                },
                                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object",
                                                        "x-kubernetes-map-type": "atomic"
                                                    },
                                                    "matchLabelKeys": {
                                                        "description": "MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both matchLabelKeys and labelSelector. Also, matchLabelKeys cannot be set when labelSelector isn't set.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "mismatchLabelKeys": {
                                                        "description": "MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both mismatchLabelKeys and labelSelector. Also, mismatchLabelKeys cannot be set when labelSelector isn't set.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "namespaceSelector": {
                                                        "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                                        "properties": {
                                                            "matchExpressions": {
                                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                                "items": {
                                                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                    "properties": {
                                                                        "key": {
                                                                            "description": "key is the label key that the selector applies to.",
                                                                            "type": "string"
                                                                        },
                                                                        "operator": {
                                                                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                            "type": "string"
                                                                        },
                                                                        "values": {
                                                                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array",
                                                                            "x-kubernetes-list-type": "atomic"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "key",
                                                                        "operator"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "matchLabels": {
                                                                "additionalProperties": {
                                                                    "type": "string"
                                                                },
                                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object",
                                                        "x-kubernetes-map-type": "atomic"
                                                    },
                                                    "namespaces": {
                                                        "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "topologyKey": {
                                                        "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "topologyKey"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array",
                                            "x-kubernetes-list-type": "atomic"
                                        }
                                    },
                                    "type": "object"
                                },
                                "podAntiAffinity": {
                                    "description": "Pod anti affinity is a group of inter pod anti affinity scheduling rules.",
                                    "properties": {
                                        "preferredDuringSchedulingIgnoredDuringExecution": {
                                            "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and subtracting \"weight\" from the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                                            "items": {
                                                "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                                                "properties": {
                                                    "podAffinityTerm": {
                                                        "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                                        "properties": {
                                                            "labelSelector": {
                                                                "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                                                "properties": {
                                                                    "matchExpressions": {
                                                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                                        "items": {
                                                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                            "properties": {
                                                                                "key": {
                                                                                    "description": "key is the label key that the selector applies to.",
                                                                                    "type": "string"
                                                                                },
                                                                                "operator": {
                                                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                                    "type": "string"
                                                                                },
                                                                                "values": {
                                                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "type": "array",
                                                                                    "x-kubernetes-list-type": "atomic"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "key",
                                                                                "operator"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array",
                                                                        "x-kubernetes-list-type": "atomic"
                                                                    },
                                                                    "matchLabels": {
                                                                        "additionalProperties": {
                                                                            "type": "string"
                                                                        },
                                                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object",
                                                                "x-kubernetes-map-type": "atomic"
                                                            },
                                                            "matchLabelKeys": {
                                                                "description": "MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both matchLabelKeys and labelSelector. Also, matchLabelKeys cannot be set when labelSelector isn't set.",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "mismatchLabelKeys": {
                                                                "description": "MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both mismatchLabelKeys and labelSelector. Also, mismatchLabelKeys cannot be set when labelSelector isn't set.",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "namespaceSelector": {
                                                                "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                                                "properties": {
                                                                    "matchExpressions": {
                                                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                                        "items": {
                                                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                            "properties": {
                                                                                "key": {
                                                                                    "description": "key is the label key that the selector applies to.",
                                                                                    "type": "string"
                                                                                },
                                                                                "operator": {
                                                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                                    "type": "string"
                                                                                },
                                                                                "values": {
                                                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "type": "array",
                                                                                    "x-kubernetes-list-type": "atomic"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "key",
                                                                                "operator"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array",
                                                                        "x-kubernetes-list-type": "atomic"
                                                                    },
                                                                    "matchLabels": {
                                                                        "additionalProperties": {
                                                                            "type": "string"
                                                                        },
                                                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object",
                                                                "x-kubernetes-map-type": "atomic"
                                                            },
                                                            "namespaces": {
                                                                "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "topologyKey": {
                                                                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "topologyKey"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "weight": {
                                                        "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                },
                                                "required": [
                                                    "weight",
                                                    "podAffinityTerm"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array",
                                            "x-kubernetes-list-type": "atomic"
                                        },
                                        "requiredDuringSchedulingIgnoredDuringExecution": {
                                            "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                                            "items": {
                                                "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                                "properties": {
                                                    "labelSelector": {
                                                        "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                                        "properties": {
                                                            "matchExpressions": {
                                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                                "items": {
                                                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                    "properties": {
                                                                        "key": {
                                                                            "description": "key is the label key that the selector applies to.",
                                                                            "type": "string"
                                                                        },
                                                                        "operator": {
                                                                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                            "type": "string"
                                                                        },
                                                                        "values": {
                                                                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array",
                                                                            "x-kubernetes-list-type": "atomic"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "key",
                                                                        "operator"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "matchLabels": {
                                                                "additionalProperties": {
                                                                    "type": "string"
                                                                },
                                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object",
                                                        "x-kubernetes-map-type": "atomic"
                                                    },
                                                    "matchLabelKeys": {
                                                        "description": "MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both matchLabelKeys and labelSelector. Also, matchLabelKeys cannot be set when labelSelector isn't set.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "mismatchLabelKeys": {
                                                        "description": "MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both mismatchLabelKeys and labelSelector. Also, mismatchLabelKeys cannot be set when labelSelector isn't set.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "namespaceSelector": {
                                                        "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                                        "properties": {
                                                            "matchExpressions": {
                                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                                "items": {
                                                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                    "properties": {
                                                                        "key": {
                                                                            "description": "key is the label key that the selector applies to.",
                                                                            "type": "string"
                                                                        },
                                                                        "operator": {
                                                                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                            "type": "string"
                                                                        },
                                                                        "values": {
                                                                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array",
                                                                            "x-kubernetes-list-type": "atomic"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "key",
                                                                        "operator"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "matchLabels": {
                                                                "additionalProperties": {
                                                                    "type": "string"
                                                                },
                                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object",
                                                        "x-kubernetes-map-type": "atomic"
                                                    },
                                                    "namespaces": {
                                                        "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "topologyKey": {
                                                        "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "topologyKey"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array",
                                            "x-kubernetes-list-type": "atomic"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "required": [],
                            "title": "affinity"
                        },
                        "containerSecurityContext": {
                            "description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
                            "properties": {
                                "allowPrivilegeEscalation": {
                                    "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.",
                                    "type": "boolean"
                                },
                                "appArmorProfile": {
                                    "description": "AppArmorProfile defines a pod or container's AppArmor settings.",
                                    "properties": {
                                        "localhostProfile": {
                                            "description": "localhostProfile indicates a profile loaded on the node that should be used. The profile must be preconfigured on the node to work. Must match the loaded name of the profile. Must be set if and only if type is \"Localhost\".",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "type indicates which kind of AppArmor profile will be applied. Valid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement.",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "type"
                                    ],
                                    "type": "object",
                                    "x-kubernetes-unions": [
                                        {
                                            "discriminator": "type",
                                            "fields-to-discriminateBy": {
                                                "localhostProfile": "LocalhostProfile"
                                            }
                                        }
                                    ]
                                },
                                "capabilities": {
                                    "description": "Adds and removes POSIX capabilities from running containers.",
                                    "properties": {
                                        "add": {
                                            "description": "Added capabilities",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array",
                                            "x-kubernetes-list-type": "atomic"
                                        },
                                        "drop": {
                                            "description": "Removed capabilities",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array",
                                            "x-kubernetes-list-type": "atomic"
                                        }
                                    },
                                    "type": "object"
                                },
                                "privileged": {
                                    "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.",
                                    "type": "boolean"
                                },
                                "procMount": {
                                    "description": "procMount denotes the type of proc mount to use for the containers. The default value is Default which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.",
                                    "type": "string"
                                },
                                "readOnlyRootFilesystem": {
                                    "description": "Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.",
                                    "type": "boolean"
                                },
                                "runAsGroup": {
                                    "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                                    "format": "int64",
                                    "type": "integer"
                                },
                                "runAsNonRoot": {
                                    "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                    "type": "boolean"
                                },
                                "runAsUser": {
                                    "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                                    "format": "int64",
                                    "type": "integer"
                                },
                                "seLinuxOptions": {
                                    "description": "SELinuxOptions are the labels to be applied to the container",
                                    "properties": {
                                        "level": {
                                            "description": "Level is SELinux level label that applies to the container.",
                                            "type": "string"
                                        },
                                        "role": {
                                            "description": "Role is a SELinux role label that applies to the container.",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Type is a SELinux type label that applies to the container.",
                                            "type": "string"
                                        },
                                        "user": {
                                            "description": "User is a SELinux user label that applies to the container.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "seccompProfile": {
                                    "description": "SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.",
                                    "properties": {
                                        "localhostProfile": {
                                            "description": "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is \"Localhost\". Must NOT be set for any other type.",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "type indicates which kind of seccomp profile will be applied. Valid options are:\n\nLocalhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "type"
                                    ],
                                    "type": "object",
                                    "x-kubernetes-unions": [
                                        {
                                            "discriminator": "type",
                                            "fields-to-discriminateBy": {
                                                "localhostProfile": "LocalhostProfile"
                                            }
                                        }
                                    ]
                                },
                                "windowsOptions": {
                                    "description": "WindowsSecurityContextOptions contain Windows-specific options and credentials.",
                                    "properties": {
                                        "gmsaCredentialSpec": {
                                            "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
                                            "type": "string"
                                        },
                                        "gmsaCredentialSpecName": {
                                            "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                                            "type": "string"
                                        },
                                        "hostProcess": {
                                            "description": "HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.",
                                            "type": "boolean"
                                        },
                                        "runAsUserName": {
                                            "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "nodeSelector": {
                            "additionalProperties": true,
                            "description": "Node labels for pod assignment <br /> Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector",
                            "required": [],
                            "title": "nodeSelector"
                        },
                        "podSecurityContext": {
                            "description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
                            "properties": {
                                "allowPrivilegeEscalation": {
                                    "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.",
                                    "type": "boolean"
                                },
                                "appArmorProfile": {
                                    "description": "AppArmorProfile defines a pod or container's AppArmor settings.",
                                    "properties": {
                                        "localhostProfile": {
                                            "description": "localhostProfile indicates a profile loaded on the node that should be used. The profile must be preconfigured on the node to work. Must match the loaded name of the profile. Must be set if and only if type is \"Localhost\".",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "type indicates which kind of AppArmor profile will be applied. Valid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement.",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "type"
                                    ],
                                    "type": "object",
                                    "x-kubernetes-unions": [
                                        {
                                            "discriminator": "type",
                                            "fields-to-discriminateBy": {
                                                "localhostProfile": "LocalhostProfile"
                                            }
                                        }
                                    ]
                                },
                                "capabilities": {
                                    "description": "Adds and removes POSIX capabilities from running containers.",
                                    "properties": {
                                        "add": {
                                            "description": "Added capabilities",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array",
                                            "x-kubernetes-list-type": "atomic"
                                        },
                                        "drop": {
                                            "description": "Removed capabilities",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array",
                                            "x-kubernetes-list-type": "atomic"
                                        }
                                    },
                                    "type": "object"
                                },
                                "privileged": {
                                    "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.",
                                    "type": "boolean"
                                },
                                "procMount": {
                                    "description": "procMount denotes the type of proc mount to use for the containers. The default value is Default which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.",
                                    "type": "string"
                                },
                                "readOnlyRootFilesystem": {
                                    "description": "Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.",
                                    "type": "boolean"
                                },
                                "runAsGroup": {
                                    "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                                    "format": "int64",
                                    "type": "integer"
                                },
                                "runAsNonRoot": {
                                    "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                    "type": "boolean"
                                },
                                "runAsUser": {
                                    "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                                    "format": "int64",
                                    "type": "integer"
                                },
                                "seLinuxOptions": {
                                    "description": "SELinuxOptions are the labels to be applied to the container",
                                    "properties": {
                                        "level": {
                                            "description": "Level is SELinux level label that applies to the container.",
                                            "type": "string"
                                        },
                                        "role": {
                                            "description": "Role is a SELinux role label that applies to the container.",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Type is a SELinux type label that applies to the container.",
                                            "type": "string"
                                        },
                                        "user": {
                                            "description": "User is a SELinux user label that applies to the container.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "seccompProfile": {
                                    "description": "SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.",
                                    "properties": {
                                        "localhostProfile": {
                                            "description": "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is \"Localhost\". Must NOT be set for any other type.",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "type indicates which kind of seccomp profile will be applied. Valid options are:\n\nLocalhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "type"
                                    ],
                                    "type": "object",
                                    "x-kubernetes-unions": [
                                        {
                                            "discriminator": "type",
                                            "fields-to-discriminateBy": {
                                                "localhostProfile": "LocalhostProfile"
                                            }
                                        }
                                    ]
                                },
                                "windowsOptions": {
                                    "description": "WindowsSecurityContextOptions contain Windows-specific options and credentials.",
                                    "properties": {
                                        "gmsaCredentialSpec": {
                                            "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
                                            "type": "string"
                                        },
                                        "gmsaCredentialSpecName": {
                                            "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                                            "type": "string"
                                        },
                                        "hostProcess": {
                                            "description": "HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.",
                                            "type": "boolean"
                                        },
                                        "runAsUserName": {
                                            "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "tolerations": {
                            "description": "Node tolerations for server scheduling to nodes with taints <br /> Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/",
                            "items": {
                                "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
                                "properties": {
                                    "effect": {
                                        "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                                        "type": "string"
                                    },
                                    "key": {
                                        "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                                        "type": "string"
                                    },
                                    "operator": {
                                        "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                                        "type": "string"
                                    },
                                    "tolerationSeconds": {
                                        "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "value": {
                                        "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "required": [],
                            "title": "tolerations"
                        },
                        "topologySpreadConstraints": {
                            "description": "Topology Spread Constraints for pod assignment <br /> Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#pod-topology-spread-constraints",
                            "items": {
                                "description": "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
                                "properties": {
                                    "labelSelector": {
                                        "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                        "properties": {
                                            "matchExpressions": {
                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                "items": {
                                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                    "properties": {
                                                        "key": {
                                                            "description": "key is the label key that the selector applies to.",
                                                            "type": "string"
                                                        },
                                                        "operator": {
                                                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                            "type": "string"
                                                        },
                                                        "values": {
                                                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array",
                                                            "x-kubernetes-list-type": "atomic"
                                                        }
                                                    },
                                                    "required": [
                                                        "key",
                                                        "operator"
                                                    ],
                                                    "type": "object"
                                                },
                                                "type": "array",
                                                "x-kubernetes-list-type": "atomic"
                                            },
                                            "matchLabels": {
                                                "additionalProperties": {
                                                    "type": "string"
                                                },
                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                "type": "object"
                                            }
                                        },
                                        "type": "object",
                                        "x-kubernetes-map-type": "atomic"
                                    },
                                    "matchLabelKeys": {
                                        "description": "MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. MatchLabelKeys cannot be set when LabelSelector isn't set. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.\n\nThis is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "x-kubernetes-list-type": "atomic"
                                    },
                                    "maxSkew": {
                                        "description": "MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "minDomains": {
                                        "description": "MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats \"global minimum\" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.\n\nFor example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so \"global minimum\" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "nodeAffinityPolicy": {
                                        "description": "NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.\n\nIf this value is nil, the behavior is equivalent to the Honor policy.",
                                        "type": "string"
                                    },
                                    "nodeTaintsPolicy": {
                                        "description": "NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.\n\nIf this value is nil, the behavior is equivalent to the Ignore policy.",
                                        "type": "string"
                                    },
                                    "topologyKey": {
                                        "description": "TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a \"bucket\", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is \"kubernetes.io/hostname\", each Node is a domain of that topology. And, if TopologyKey is \"topology.kubernetes.io/zone\", each zone is a domain of that topology. It's a required field.",
                                        "type": "string"
                                    },
                                    "whenUnsatisfiable": {
                                        "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,\n  but giving higher precedence to topologies that would help reduce the\n  skew.\nA constraint is considered \"Unsatisfiable\" for an incoming pod if and only if every possible node assignment for that pod would violate \"MaxSkew\" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "maxSkew",
                                    "topologyKey",
                                    "whenUnsatisfiable"
                                ],
                                "type": "object"
                            },
                            "required": [],
                            "title": "topologySpreadConstraints"
                        },
                        "vllm": {
                            "additionalProperties": false,
                            "description": "vLLM container settings",
                            "properties": {
                                "containerSecurityContext": {
                                    "description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
                                    "properties": {
                                        "allowPrivilegeEscalation": {
                                            "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.",
                                            "type": "boolean"
                                        },
                                        "appArmorProfile": {
                                            "description": "AppArmorProfile defines a pod or container's AppArmor settings.",
                                            "properties": {
                                                "localhostProfile": {
                                                    "description": "localhostProfile indicates a profile loaded on the node that should be used. The profile must be preconfigured on the node to work. Must match the loaded name of the profile. Must be set if and only if type is \"Localhost\".",
                                                    "type": "string"
                                                },
                                                "type": {
                                                    "description": "type indicates which kind of AppArmor profile will be applied. Valid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement.",
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "type"
                                            ],
                                            "type": "object",
                                            "x-kubernetes-unions": [
                                                {
                                                    "discriminator": "type",
                                                    "fields-to-discriminateBy": {
                                                        "localhostProfile": "LocalhostProfile"
                                                    }
                                                }
                                            ]
                                        },
                                        "capabilities": {
                                            "description": "Adds and removes POSIX capabilities from running containers.",
                                            "properties": {
                                                "add": {
                                                    "description": "Added capabilities",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "type": "array",
                                                    "x-kubernetes-list-type": "atomic"
                                                },
                                                "drop": {
                                                    "description": "Removed capabilities",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "type": "array",
                                                    "x-kubernetes-list-type": "atomic"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "privileged": {
                                            "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.",
                                            "type": "boolean"
                                        },
                                        "procMount": {
                                            "description": "procMount denotes the type of proc mount to use for the containers. The default value is Default which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.",
                                            "type": "string"
                                        },
                                        "readOnlyRootFilesystem": {
                                            "description": "Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.",
                                            "type": "boolean"
                                        },
                                        "runAsGroup": {
                                            "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                                            "format": "int64",
                                            "type": "integer"
                                        },
                                        "runAsNonRoot": {
                                            "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                            "type": "boolean"
                                        },
                                        "runAsUser": {
                                            "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                                            "format": "int64",
                                            "type": "integer"
                                        },
                                        "seLinuxOptions": {
                                            "description": "SELinuxOptions are the labels to be applied to the container",
                                            "properties": {
                                                "level": {
                                                    "description": "Level is SELinux level label that applies to the container.",
                                                    "type": "string"
                                                },
                                                "role": {
                                                    "description": "Role is a SELinux role label that applies to the container.",
                                                    "type": "string"
                                                },
                                                "type": {
                                                    "description": "Type is a SELinux type label that applies to the container.",
                                                    "type": "string"
                                                },
                                                "user": {
                                                    "description": "User is a SELinux user label that applies to the container.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "seccompProfile": {
                                            "description": "SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.",
                                            "properties": {
                                                "localhostProfile": {
                                                    "description": "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is \"Localhost\". Must NOT be set for any other type.",
                                                    "type": "string"
                                                },
                                                "type": {
                                                    "description": "type indicates which kind of seccomp profile will be applied. Valid options are:\n\nLocalhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.",
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "type"
                                            ],
                                            "type": "object",
                                            "x-kubernetes-unions": [
                                                {
                                                    "discriminator": "type",
                                                    "fields-to-discriminateBy": {
                                                        "localhostProfile": "LocalhostProfile"
                                                    }
                                                }
                                            ]
                                        },
                                        "windowsOptions": {
                                            "description": "WindowsSecurityContextOptions contain Windows-specific options and credentials.",
                                            "properties": {
                                                "gmsaCredentialSpec": {
                                                    "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
                                                    "type": "string"
                                                },
                                                "gmsaCredentialSpecName": {
                                                    "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                                                    "type": "string"
                                                },
                                                "hostProcess": {
                                                    "description": "HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.",
                                                    "type": "boolean"
                                                },
                                                "runAsUserName": {
                                                    "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "required": [],
                            "title": "vllm"
                        }
                    },
                    "required": [],
                    "title": "decode"
                },
                "enabled": {
                    "default": "true",
                    "description": "Toggle to deploy modelservice controller related resources",
                    "required": [],
                    "title": "enabled"
                },
                "epp": {
                    "additionalProperties": false,
                    "default": "See below",
                    "description": "Endpoint picker configuration",
                    "properties": {
                        "affinity": {
                            "additionalProperties": false,
                            "description": "Affinity for pod assignment <br /> Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity",
                            "properties": {
                                "nodeAffinity": {
                                    "description": "Node affinity is a group of node affinity scheduling rules.",
                                    "properties": {
                                        "preferredDuringSchedulingIgnoredDuringExecution": {
                                            "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
                                            "items": {
                                                "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                                                "properties": {
                                                    "preference": {
                                                        "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                                                        "properties": {
                                                            "matchExpressions": {
                                                                "description": "A list of node selector requirements by node's labels.",
                                                                "items": {
                                                                    "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                    "properties": {
                                                                        "key": {
                                                                            "description": "The label key that the selector applies to.",
                                                                            "type": "string"
                                                                        },
                                                                        "operator": {
                                                                            "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                                            "type": "string"
                                                                        },
                                                                        "values": {
                                                                            "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array",
                                                                            "x-kubernetes-list-type": "atomic"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "key",
                                                                        "operator"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "matchFields": {
                                                                "description": "A list of node selector requirements by node's fields.",
                                                                "items": {
                                                                    "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                    "properties": {
                                                                        "key": {
                                                                            "description": "The label key that the selector applies to.",
                                                                            "type": "string"
                                                                        },
                                                                        "operator": {
                                                                            "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                                            "type": "string"
                                                                        },
                                                                        "values": {
                                                                            "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array",
                                                                            "x-kubernetes-list-type": "atomic"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "key",
                                                                        "operator"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            }
                                                        },
                                                        "type": "object",
                                                        "x-kubernetes-map-type": "atomic"
                                                    },
                                                    "weight": {
                                                        "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                },
                                                "required": [
                                                    "weight",
                                                    "preference"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array",
                                            "x-kubernetes-list-type": "atomic"
                                        },
                                        "requiredDuringSchedulingIgnoredDuringExecution": {
                                            "description": "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.",
                                            "properties": {
                                                "nodeSelectorTerms": {
                                                    "description": "Required. A list of node selector terms. The terms are ORed.",
                                                    "items": {
                                                        "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                                                        "properties": {
                                                            "matchExpressions": {
                                                                "description": "A list of node selector requirements by node's labels.",
                                                                "items": {
                                                                    "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                    "properties": {
                                                                        "key": {
                                                                            "description": "The label key that the selector applies to.",
                                                                            "type": "string"
                                                                        },
                                                                        "operator": {
                                                                            "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                                            "type": "string"
                                                                        },
                                                                        "values": {
                                                                            "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array",
                                                                            "x-kubernetes-list-type": "atomic"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "key",
                                                                        "operator"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "matchFields": {
                                                                "description": "A list of node selector requirements by node's fields.",
                                                                "items": {
                                                                    "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                    "properties": {
                                                                        "key": {
                                                                            "description": "The label key that the selector applies to.",
                                                                            "type": "string"
                                                                        },
                                                                        "operator": {
                                                                            "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                                            "type": "string"
                                                                        },
                                                                        "values": {
                                                                            "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array",
                                                                            "x-kubernetes-list-type": "atomic"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "key",
                                                                        "operator"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            }
                                                        },
                                                        "type": "object",
                                                        "x-kubernetes-map-type": "atomic"
                                                    },
                                                    "type": "array",
                                                    "x-kubernetes-list-type": "atomic"
                                                }
                                            },
                                            "required": [
                                                "nodeSelectorTerms"
                                            ],
                                            "type": "object",
                                            "x-kubernetes-map-type": "atomic"
                                        }
                                    },
                                    "type": "object"
                                },
                                "podAffinity": {
                                    "description": "Pod affinity is a group of inter pod affinity scheduling rules.",
                                    "properties": {
                                        "preferredDuringSchedulingIgnoredDuringExecution": {
                                            "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                                            "items": {
                                                "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                                                "properties": {
                                                    "podAffinityTerm": {
                                                        "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                                        "properties": {
                                                            "labelSelector": {
                                                                "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                                                "properties": {
                                                                    "matchExpressions": {
                                                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                                        "items": {
                                                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                            "properties": {
                                                                                "key": {
                                                                                    "description": "key is the label key that the selector applies to.",
                                                                                    "type": "string"
                                                                                },
                                                                                "operator": {
                                                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                                    "type": "string"
                                                                                },
                                                                                "values": {
                                                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "type": "array",
                                                                                    "x-kubernetes-list-type": "atomic"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "key",
                                                                                "operator"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array",
                                                                        "x-kubernetes-list-type": "atomic"
                                                                    },
                                                                    "matchLabels": {
                                                                        "additionalProperties": {
                                                                            "type": "string"
                                                                        },
                                                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object",
                                                                "x-kubernetes-map-type": "atomic"
                                                            },
                                                            "matchLabelKeys": {
                                                                "description": "MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both matchLabelKeys and labelSelector. Also, matchLabelKeys cannot be set when labelSelector isn't set.",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "mismatchLabelKeys": {
                                                                "description": "MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both mismatchLabelKeys and labelSelector. Also, mismatchLabelKeys cannot be set when labelSelector isn't set.",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "namespaceSelector": {
                                                                "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                                                "properties": {
                                                                    "matchExpressions": {
                                                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                                        "items": {
                                                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                            "properties": {
                                                                                "key": {
                                                                                    "description": "key is the label key that the selector applies to.",
                                                                                    "type": "string"
                                                                                },
                                                                                "operator": {
                                                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                                    "type": "string"
                                                                                },
                                                                                "values": {
                                                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "type": "array",
                                                                                    "x-kubernetes-list-type": "atomic"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "key",
                                                                                "operator"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array",
                                                                        "x-kubernetes-list-type": "atomic"
                                                                    },
                                                                    "matchLabels": {
                                                                        "additionalProperties": {
                                                                            "type": "string"
                                                                        },
                                                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object",
                                                                "x-kubernetes-map-type": "atomic"
                                                            },
                                                            "namespaces": {
                                                                "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "topologyKey": {
                                                                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "topologyKey"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "weight": {
                                                        "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                },
                                                "required": [
                                                    "weight",
                                                    "podAffinityTerm"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array",
                                            "x-kubernetes-list-type": "atomic"
                                        },
                                        "requiredDuringSchedulingIgnoredDuringExecution": {
                                            "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                                            "items": {
                                                "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                                "properties": {
                                                    "labelSelector": {
                                                        "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                                        "properties": {
                                                            "matchExpressions": {
                                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                                "items": {
                                                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                    "properties": {
                                                                        "key": {
                                                                            "description": "key is the label key that the selector applies to.",
                                                                            "type": "string"
                                                                        },
                                                                        "operator": {
                                                                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                            "type": "string"
                                                                        },
                                                                        "values": {
                                                                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array",
                                                                            "x-kubernetes-list-type": "atomic"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "key",
                                                                        "operator"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "matchLabels": {
                                                                "additionalProperties": {
                                                                    "type": "string"
                                                                },
                                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object",
                                                        "x-kubernetes-map-type": "atomic"
                                                    },
                                                    "matchLabelKeys": {
                                                        "description": "MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both matchLabelKeys and labelSelector. Also, matchLabelKeys cannot be set when labelSelector isn't set.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "mismatchLabelKeys": {
                                                        "description": "MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both mismatchLabelKeys and labelSelector. Also, mismatchLabelKeys cannot be set when labelSelector isn't set.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "namespaceSelector": {
                                                        "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                                        "properties": {
                                                            "matchExpressions": {
                                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                                "items": {
                                                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                    "properties": {
                                                                        "key": {
                                                                            "description": "key is the label key that the selector applies to.",
                                                                            "type": "string"
                                                                        },
                                                                        "operator": {
                                                                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                            "type": "string"
                                                                        },
                                                                        "values": {
                                                                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array",
                                                                            "x-kubernetes-list-type": "atomic"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "key",
                                                                        "operator"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "matchLabels": {
                                                                "additionalProperties": {
                                                                    "type": "string"
                                                                },
                                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object",
                                                        "x-kubernetes-map-type": "atomic"
                                                    },
                                                    "namespaces": {
                                                        "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "topologyKey": {
                                                        "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "topologyKey"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array",
                                            "x-kubernetes-list-type": "atomic"
                                        }
                                    },
                                    "type": "object"
                                },
                                "podAntiAffinity": {
                                    "description": "Pod anti affinity is a group of inter pod anti affinity scheduling rules.",
                                    "properties": {
                                        "preferredDuringSchedulingIgnoredDuringExecution": {
                                            "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and subtracting \"weight\" from the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                                            "items": {
                                                "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                                                "properties": {
                                                    "podAffinityTerm": {
                                                        "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                                        "properties": {
                                                            "labelSelector": {
                                                                "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                                                "properties": {
                                                                    "matchExpressions": {
                                                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                                        "items": {
                                                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                            "properties": {
                                                                                "key": {
                                                                                    "description": "key is the label key that the selector applies to.",
                                                                                    "type": "string"
                                                                                },
                                                                                "operator": {
                                                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                                    "type": "string"
                                                                                },
                                                                                "values": {
                                                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "type": "array",
                                                                                    "x-kubernetes-list-type": "atomic"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "key",
                                                                                "operator"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array",
                                                                        "x-kubernetes-list-type": "atomic"
                                                                    },
                                                                    "matchLabels": {
                                                                        "additionalProperties": {
                                                                            "type": "string"
                                                                        },
                                                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object",
                                                                "x-kubernetes-map-type": "atomic"
                                                            },
                                                            "matchLabelKeys": {
                                                                "description": "MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both matchLabelKeys and labelSelector. Also, matchLabelKeys cannot be set when labelSelector isn't set.",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "mismatchLabelKeys": {
                                                                "description": "MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both mismatchLabelKeys and labelSelector. Also, mismatchLabelKeys cannot be set when labelSelector isn't set.",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "namespaceSelector": {
                                                                "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                                                "properties": {
                                                                    "matchExpressions": {
                                                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                                        "items": {
                                                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                            "properties": {
                                                                                "key": {
                                                                                    "description": "key is the label key that the selector applies to.",
                                                                                    "type": "string"
                                                                                },
                                                                                "operator": {
                                                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                                    "type": "string"
                                                                                },
                                                                                "values": {
                                                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "type": "array",
                                                                                    "x-kubernetes-list-type": "atomic"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "key",
                                                                                "operator"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array",
                                                                        "x-kubernetes-list-type": "atomic"
                                                                    },
                                                                    "matchLabels": {
                                                                        "additionalProperties": {
                                                                            "type": "string"
                                                                        },
                                                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object",
                                                                "x-kubernetes-map-type": "atomic"
                                                            },
                                                            "namespaces": {
                                                                "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "topologyKey": {
                                                                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "topologyKey"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "weight": {
                                                        "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                },
                                                "required": [
                                                    "weight",
                                                    "podAffinityTerm"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array",
                                            "x-kubernetes-list-type": "atomic"
                                        },
                                        "requiredDuringSchedulingIgnoredDuringExecution": {
                                            "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                                            "items": {
                                                "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                                "properties": {
                                                    "labelSelector": {
                                                        "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                                        "properties": {
                                                            "matchExpressions": {
                                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                                "items": {
                                                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                    "properties": {
                                                                        "key": {
                                                                            "description": "key is the label key that the selector applies to.",
                                                                            "type": "string"
                                                                        },
                                                                        "operator": {
                                                                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                            "type": "string"
                                                                        },
                                                                        "values": {
                                                                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array",
                                                                            "x-kubernetes-list-type": "atomic"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "key",
                                                                        "operator"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "matchLabels": {
                                                                "additionalProperties": {
                                                                    "type": "string"
                                                                },
                                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object",
                                                        "x-kubernetes-map-type": "atomic"
                                                    },
                                                    "matchLabelKeys": {
                                                        "description": "MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both matchLabelKeys and labelSelector. Also, matchLabelKeys cannot be set when labelSelector isn't set.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "mismatchLabelKeys": {
                                                        "description": "MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both mismatchLabelKeys and labelSelector. Also, mismatchLabelKeys cannot be set when labelSelector isn't set.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "namespaceSelector": {
                                                        "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                                        "properties": {
                                                            "matchExpressions": {
                                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                                "items": {
                                                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                    "properties": {
                                                                        "key": {
                                                                            "description": "key is the label key that the selector applies to.",
                                                                            "type": "string"
                                                                        },
                                                                        "operator": {
                                                                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                            "type": "string"
                                                                        },
                                                                        "values": {
                                                                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array",
                                                                            "x-kubernetes-list-type": "atomic"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "key",
                                                                        "operator"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "matchLabels": {
                                                                "additionalProperties": {
                                                                    "type": "string"
                                                                },
                                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object",
                                                        "x-kubernetes-map-type": "atomic"
                                                    },
                                                    "namespaces": {
                                                        "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "topologyKey": {
                                                        "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "topologyKey"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array",
                                            "x-kubernetes-list-type": "atomic"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "required": [],
                            "title": "affinity"
                        },
                        "containerSecurityContext": {
                            "description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
                            "properties": {
                                "allowPrivilegeEscalation": {
                                    "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.",
                                    "type": "boolean"
                                },
                                "appArmorProfile": {
                                    "description": "AppArmorProfile defines a pod or container's AppArmor settings.",
                                    "properties": {
                                        "localhostProfile": {
                                            "description": "localhostProfile indicates a profile loaded on the node that should be used. The profile must be preconfigured on the node to work. Must match the loaded name of the profile. Must be set if and only if type is \"Localhost\".",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "type indicates which kind of AppArmor profile will be applied. Valid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement.",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "type"
                                    ],
                                    "type": "object",
                                    "x-kubernetes-unions": [
                                        {
                                            "discriminator": "type",
                                            "fields-to-discriminateBy": {
                                                "localhostProfile": "LocalhostProfile"
                                            }
                                        }
                                    ]
                                },
                                "capabilities": {
                                    "description": "Adds and removes POSIX capabilities from running containers.",
                                    "properties": {
                                        "add": {
                                            "description": "Added capabilities",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array",
                                            "x-kubernetes-list-type": "atomic"
                                        },
                                        "drop": {
                                            "description": "Removed capabilities",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array",
                                            "x-kubernetes-list-type": "atomic"
                                        }
                                    },
                                    "type": "object"
                                },
                                "privileged": {
                                    "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.",
                                    "type": "boolean"
                                },
                                "procMount": {
                                    "description": "procMount denotes the type of proc mount to use for the containers. The default value is Default which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.",
                                    "type": "string"
                                },
                                "readOnlyRootFilesystem": {
                                    "description": "Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.",
                                    "type": "boolean"
                                },
                                "runAsGroup": {
                                    "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                                    "format": "int64",
                                    "type": "integer"
                                },
                                "runAsNonRoot": {
                                    "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                    "type": "boolean"
                                },
                                "runAsUser": {
                                    "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                                    "format": "int64",
                                    "type": "integer"
                                },
                                "seLinuxOptions": {
                                    "description": "SELinuxOptions are the labels to be applied to the container",
                                    "properties": {
                                        "level": {
                                            "description": "Level is SELinux level label that applies to the container.",
                                            "type": "string"
                                        },
                                        "role": {
                                            "description": "Role is a SELinux role label that applies to the container.",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Type is a SELinux type label that applies to the container.",
                                            "type": "string"
                                        },
                                        "user": {
                                            "description": "User is a SELinux user label that applies to the container.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "seccompProfile": {
                                    "description": "SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.",
                                    "properties": {
                                        "localhostProfile": {
                                            "description": "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is \"Localhost\". Must NOT be set for any other type.",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "type indicates which kind of seccomp profile will be applied. Valid options are:\n\nLocalhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "type"
                                    ],
                                    "type": "object",
                                    "x-kubernetes-unions": [
                                        {
                                            "discriminator": "type",
                                            "fields-to-discriminateBy": {
                                                "localhostProfile": "LocalhostProfile"
                                            }
                                        }
                                    ]
                                },
                                "windowsOptions": {
                                    "description": "WindowsSecurityContextOptions contain Windows-specific options and credentials.",
                                    "properties": {
                                        "gmsaCredentialSpec": {
                                            "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
                                            "type": "string"
                                        },
                                        "gmsaCredentialSpecName": {
                                            "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                                            "type": "string"
                                        },
                                        "hostProcess": {
                                            "description": "HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.",
                                            "type": "boolean"
                                        },
                                        "runAsUserName": {
                                            "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "defaultEnvVars": {
                            "description": "Default environment variables for endpoint picker, use `defaultEnvVarsOverride` to override default behavior by defining the same variable again. Ref: https://github.com/llm-d/llm-d-inference-scheduler/blob/main/docs/architecture.md#scorers--configuration",
                            "items": {
                                "anyOf": [
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "name": {
                                                "default": "ENABLE_KVCACHE_AWARE_SCORER",
                                                "required": [],
                                                "title": "name",
                                                "type": "string"
                                            },
                                            "value": {
                                                "default": "false",
                                                "required": [],
                                                "title": "value",
                                                "type": "string"
                                            }
                                        },
                                        "required": [],
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "name": {
                                                "default": "KVCACHE_AWARE_SCORER_WEIGHT",
                                                "required": [],
                                                "title": "name",
                                                "type": "string"
                                            },
                                            "value": {
                                                "default": "1",
                                                "required": [],
                                                "title": "value",
                                                "type": "string"
                                            }
                                        },
                                        "required": [],
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "name": {
                                                "default": "KVCACHE_INDEXER_REDIS_ADDR",
                                                "required": [],
                                                "title": "name",
                                                "type": "string"
                                            },
                                            "value": {
                                                "default": "{{ if .Values.redis.enabled }}{{ include \"redis.master.service.fullurl\" . }}{{ end }}",
                                                "required": [],
                                                "title": "value",
                                                "type": "string"
                                            }
                                        },
                                        "required": [],
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "name": {
                                                "default": "ENABLE_PREFIX_AWARE_SCORER",
                                                "required": [],
                                                "title": "name",
                                                "type": "string"
                                            },
                                            "value": {
                                                "default": "true",
                                                "required": [],
                                                "title": "value",
                                                "type": "string"
                                            }
                                        },
                                        "required": [],
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "name": {
                                                "default": "PREFIX_AWARE_SCORER_WEIGHT",
                                                "required": [],
                                                "title": "name",
                                                "type": "string"
                                            },
                                            "value": {
                                                "default": "2",
                                                "required": [],
                                                "title": "value",
                                                "type": "string"
                                            }
                                        },
                                        "required": [],
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "name": {
                                                "default": "ENABLE_LOAD_AWARE_SCORER",
                                                "required": [],
                                                "title": "name",
                                                "type": "string"
                                            },
                                            "value": {
                                                "default": "true",
                                                "required": [],
                                                "title": "value",
                                                "type": "string"
                                            }
                                        },
                                        "required": [],
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "name": {
                                                "default": "LOAD_AWARE_SCORER_WEIGHT",
                                                "required": [],
                                                "title": "name",
                                                "type": "string"
                                            },
                                            "value": {
                                                "default": "1",
                                                "required": [],
                                                "title": "value",
                                                "type": "string"
                                            }
                                        },
                                        "required": [],
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "name": {
                                                "default": "ENABLE_SESSION_AWARE_SCORER",
                                                "required": [],
                                                "title": "name",
                                                "type": "string"
                                            },
                                            "value": {
                                                "default": "false",
                                                "required": [],
                                                "title": "value",
                                                "type": "string"
                                            }
                                        },
                                        "required": [],
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "name": {
                                                "default": "SESSION_AWARE_SCORER_WEIGHT",
                                                "required": [],
                                                "title": "name",
                                                "type": "string"
                                            },
                                            "value": {
                                                "default": "1",
                                                "required": [],
                                                "title": "value",
                                                "type": "string"
                                            }
                                        },
                                        "required": [],
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "name": {
                                                "default": "PD_ENABLED",
                                                "required": [],
                                                "title": "name",
                                                "type": "string"
                                            },
                                            "value": {
                                                "default": "false",
                                                "required": [],
                                                "title": "value",
                                                "type": "string"
                                            }
                                        },
                                        "required": [],
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "name": {
                                                "default": "PD_PROMPT_LEN_THRESHOLD",
                                                "required": [],
                                                "title": "name",
                                                "type": "string"
                                            },
                                            "value": {
                                                "default": "10",
                                                "required": [],
                                                "title": "value",
                                                "type": "string"
                                            }
                                        },
                                        "required": [],
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "name": {
                                                "default": "PREFILL_ENABLE_KVCACHE_AWARE_SCORER",
                                                "required": [],
                                                "title": "name",
                                                "type": "string"
                                            },
                                            "value": {
                                                "default": "false",
                                                "required": [],
                                                "title": "value",
                                                "type": "string"
                                            }
                                        },
                                        "required": [],
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "name": {
                                                "default": "PREFILL_KVCACHE_AWARE_SCORER_WEIGHT",
                                                "required": [],
                                                "title": "name",
                                                "type": "string"
                                            },
                                            "value": {
                                                "default": "1",
                                                "required": [],
                                                "title": "value",
                                                "type": "string"
                                            }
                                        },
                                        "required": [],
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "name": {
                                                "default": "PREFILL_KVCACHE_INDEXER_REDIS_ADDR",
                                                "required": [],
                                                "title": "name",
                                                "type": "string"
                                            },
                                            "value": {
                                                "default": "{{ if .Values.redis.enabled }}{{ include \"redis.master.service.fullurl\" . }}{{ end }}",
                                                "required": [],
                                                "title": "value",
                                                "type": "string"
                                            }
                                        },
                                        "required": [],
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "name": {
                                                "default": "PREFILL_ENABLE_LOAD_AWARE_SCORER",
                                                "required": [],
                                                "title": "name",
                                                "type": "string"
                                            },
                                            "value": {
                                                "default": "false",
                                                "required": [],
                                                "title": "value",
                                                "type": "string"
                                            }
                                        },
                                        "required": [],
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "name": {
                                                "default": "PREFILL_LOAD_AWARE_SCORER_WEIGHT",
                                                "required": [],
                                                "title": "name",
                                                "type": "string"
                                            },
                                            "value": {
                                                "default": "1",
                                                "required": [],
                                                "title": "value",
                                                "type": "string"
                                            }
                                        },
                                        "required": [],
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "name": {
                                                "default": "PREFILL_ENABLE_PREFIX_AWARE_SCORER",
                                                "required": [],
                                                "title": "name",
                                                "type": "string"
                                            },
                                            "value": {
                                                "default": "false",
                                                "required": [],
                                                "title": "value",
                                                "type": "string"
                                            }
                                        },
                                        "required": [],
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "name": {
                                                "default": "PREFILL_PREFIX_AWARE_SCORER_WEIGHT",
                                                "required": [],
                                                "title": "name",
                                                "type": "string"
                                            },
                                            "value": {
                                                "default": "1",
                                                "required": [],
                                                "title": "value",
                                                "type": "string"
                                            }
                                        },
                                        "required": [],
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "name": {
                                                "default": "PREFILL_ENABLE_SESSION_AWARE_SCORER",
                                                "required": [],
                                                "title": "name",
                                                "type": "string"
                                            },
                                            "value": {
                                                "default": "false",
                                                "required": [],
                                                "title": "value",
                                                "type": "string"
                                            }
                                        },
                                        "required": [],
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "name": {
                                                "default": "PREFILL_SESSION_AWARE_SCORER_WEIGHT",
                                                "required": [],
                                                "title": "name",
                                                "type": "string"
                                            },
                                            "value": {
                                                "default": "1",
                                                "required": [],
                                                "title": "value",
                                                "type": "string"
                                            }
                                        },
                                        "required": [],
                                        "type": "object"
                                    }
                                ],
                                "required": []
                            },
                            "required": [],
                            "title": "defaultEnvVars"
                        },
                        "defaultEnvVarsOverride": {
                            "description": "Override default environment variables for endpoint picker. This list has priorito over `defaultEnvVars`",
                            "items": {
                                "description": "EnvVar represents an environment variable present in a Container.",
                                "properties": {
                                    "name": {
                                        "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                                        "type": "string"
                                    },
                                    "value": {
                                        "description": "Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
                                        "type": "string"
                                    },
                                    "valueFrom": {
                                        "description": "EnvVarSource represents a source for the value of an EnvVar.",
                                        "properties": {
                                            "configMapKeyRef": {
                                                "description": "Selects a key from a ConfigMap.",
                                                "properties": {
                                                    "key": {
                                                        "description": "The key to select.",
                                                        "type": "string"
                                                    },
                                                    "name": {
                                                        "description": "Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                                        "type": "string"
                                                    },
                                                    "optional": {
                                                        "description": "Specify whether the ConfigMap or its key must be defined",
                                                        "type": "boolean"
                                                    }
                                                },
                                                "required": [
                                                    "key"
                                                ],
                                                "type": "object",
                                                "x-kubernetes-map-type": "atomic"
                                            },
                                            "fieldRef": {
                                                "description": "ObjectFieldSelector selects an APIVersioned field of an object.",
                                                "properties": {
                                                    "apiVersion": {
                                                        "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                                        "type": "string"
                                                    },
                                                    "fieldPath": {
                                                        "description": "Path of the field to select in the specified API version.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "fieldPath"
                                                ],
                                                "type": "object",
                                                "x-kubernetes-map-type": "atomic"
                                            },
                                            "resourceFieldRef": {
                                                "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
                                                "properties": {
                                                    "containerName": {
                                                        "description": "Container name: required for volumes, optional for env vars",
                                                        "type": "string"
                                                    },
                                                    "divisor": {
                                                        "oneOf": [
                                                            {
                                                                "type": "string"
                                                            },
                                                            {
                                                                "type": "number"
                                                            }
                                                        ]
                                                    },
                                                    "resource": {
                                                        "description": "Required: resource to select",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "resource"
                                                ],
                                                "type": "object",
                                                "x-kubernetes-map-type": "atomic"
                                            },
                                            "secretKeyRef": {
                                                "description": "SecretKeySelector selects a key of a Secret.",
                                                "properties": {
                                                    "key": {
                                                        "description": "The key of the secret to select from.  Must be a valid secret key.",
                                                        "type": "string"
                                                    },
                                                    "name": {
                                                        "description": "Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                                        "type": "string"
                                                    },
                                                    "optional": {
                                                        "description": "Specify whether the Secret or its key must be defined",
                                                        "type": "boolean"
                                                    }
                                                },
                                                "required": [
                                                    "key"
                                                ],
                                                "type": "object",
                                                "x-kubernetes-map-type": "atomic"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "name"
                                ],
                                "type": "object"
                            },
                            "required": [],
                            "title": "defaultEnvVarsOverride"
                        },
                        "image": {
                            "additionalProperties": false,
                            "default": "See below",
                            "description": "Endpoint picker image used in ModelService CR presets",
                            "properties": {
                                "imagePullPolicy": {
                                    "default": "Always",
                                    "description": "Specify a imagePullPolicy",
                                    "required": [],
                                    "title": "imagePullPolicy"
                                },
                                "pullSecrets": {
                                    "description": "Optionally specify an array of imagePullSecrets (evaluated as templates)",
                                    "items": {
                                        "required": [],
                                        "type": "string"
                                    },
                                    "required": [],
                                    "title": "pullSecrets"
                                },
                                "registry": {
                                    "default": "ghcr.io",
                                    "description": "Endpoint picker image registry",
                                    "required": [],
                                    "title": "registry"
                                },
                                "repository": {
                                    "default": "llm-d/llm-d-inference-scheduler",
                                    "description": "Endpoint picker image repository",
                                    "required": [],
                                    "title": "repository"
                                },
                                "tag": {
                                    "default": "0.0.4",
                                    "description": "Endpoint picker image tag",
                                    "required": [],
                                    "title": "tag"
                                }
                            },
                            "required": [],
                            "title": "image"
                        },
                        "metrics": {
                            "additionalProperties": false,
                            "description": "Enable metrics gathering via podMonitor / ServiceMonitor",
                            "properties": {
                                "enabled": {
                                    "default": "true",
                                    "description": "Enable metrics scraping from endpoint picker service",
                                    "required": [],
                                    "title": "enabled"
                                },
                                "serviceMonitor": {
                                    "additionalProperties": false,
                                    "default": "See below",
                                    "description": "Prometheus ServiceMonitor configuration <br /> Ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api-reference/api.md",
                                    "properties": {
                                        "annotations": {
                                            "additionalProperties": true,
                                            "description": "Additional annotations provided to the ServiceMonitor",
                                            "required": [],
                                            "title": "annotations"
                                        },
                                        "interval": {
                                            "default": "10s",
                                            "description": "ServiceMonitor endpoint interval at which metrics should be scraped",
                                            "required": [],
                                            "title": "interval"
                                        },
                                        "labels": {
                                            "additionalProperties": true,
                                            "description": "Additional labels provided to the ServiceMonitor",
                                            "required": [],
                                            "title": "labels"
                                        },
                                        "namespaceSelector": {
                                            "additionalProperties": false,
                                            "description": "ServiceMonitor namespace selector",
                                            "properties": {
                                                "any": {
                                                    "default": false,
                                                    "required": [],
                                                    "title": "any",
                                                    "type": "boolean"
                                                },
                                                "matchNames": {
                                                    "description": " items:   type: string @schema",
                                                    "items": {
                                                        "required": [],
                                                        "type": "string"
                                                    },
                                                    "required": [],
                                                    "title": "matchNames"
                                                }
                                            },
                                            "required": [],
                                            "title": "namespaceSelector"
                                        },
                                        "path": {
                                            "default": "/metrics",
                                            "description": "ServiceMonitor endpoint path",
                                            "required": [],
                                            "title": "path"
                                        },
                                        "port": {
                                            "default": "metrics",
                                            "description": "ServiceMonitor endpoint port",
                                            "required": [],
                                            "title": "port"
                                        },
                                        "selector": {
                                            "additionalProperties": false,
                                            "description": "ServiceMonitor selector matchLabels </br> matchLabels must match labels on modelservice Services",
                                            "properties": {
                                                "matchLabels": {
                                                    "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                                    "properties": {
                                                        "matchExpressions": {
                                                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                            "items": {
                                                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                "properties": {
                                                                    "key": {
                                                                        "description": "key is the label key that the selector applies to.",
                                                                        "type": "string"
                                                                    },
                                                                    "operator": {
                                                                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                        "type": "string"
                                                                    },
                                                                    "values": {
                                                                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                        "items": {
                                                                            "type": "string"
                                                                        },
                                                                        "type": "array",
                                                                        "x-kubernetes-list-type": "atomic"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "key",
                                                                    "operator"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array",
                                                            "x-kubernetes-list-type": "atomic"
                                                        },
                                                        "matchLabels": {
                                                            "additionalProperties": {
                                                                "type": "string"
                                                            },
                                                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object",
                                                    "x-kubernetes-map-type": "atomic"
                                                }
                                            },
                                            "required": [],
                                            "title": "selector"
                                        }
                                    },
                                    "required": [],
                                    "title": "serviceMonitor"
                                }
                            },
                            "required": [],
                            "title": "metrics"
                        },
                        "nodeSelector": {
                            "additionalProperties": true,
                            "description": "Node labels for pod assignment <br /> Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector",
                            "required": [],
                            "title": "nodeSelector"
                        },
                        "podSecurityContext": {
                            "description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
                            "properties": {
                                "allowPrivilegeEscalation": {
                                    "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.",
                                    "type": "boolean"
                                },
                                "appArmorProfile": {
                                    "description": "AppArmorProfile defines a pod or container's AppArmor settings.",
                                    "properties": {
                                        "localhostProfile": {
                                            "description": "localhostProfile indicates a profile loaded on the node that should be used. The profile must be preconfigured on the node to work. Must match the loaded name of the profile. Must be set if and only if type is \"Localhost\".",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "type indicates which kind of AppArmor profile will be applied. Valid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement.",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "type"
                                    ],
                                    "type": "object",
                                    "x-kubernetes-unions": [
                                        {
                                            "discriminator": "type",
                                            "fields-to-discriminateBy": {
                                                "localhostProfile": "LocalhostProfile"
                                            }
                                        }
                                    ]
                                },
                                "capabilities": {
                                    "description": "Adds and removes POSIX capabilities from running containers.",
                                    "properties": {
                                        "add": {
                                            "description": "Added capabilities",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array",
                                            "x-kubernetes-list-type": "atomic"
                                        },
                                        "drop": {
                                            "description": "Removed capabilities",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array",
                                            "x-kubernetes-list-type": "atomic"
                                        }
                                    },
                                    "type": "object"
                                },
                                "privileged": {
                                    "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.",
                                    "type": "boolean"
                                },
                                "procMount": {
                                    "description": "procMount denotes the type of proc mount to use for the containers. The default value is Default which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.",
                                    "type": "string"
                                },
                                "readOnlyRootFilesystem": {
                                    "description": "Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.",
                                    "type": "boolean"
                                },
                                "runAsGroup": {
                                    "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                                    "format": "int64",
                                    "type": "integer"
                                },
                                "runAsNonRoot": {
                                    "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                    "type": "boolean"
                                },
                                "runAsUser": {
                                    "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                                    "format": "int64",
                                    "type": "integer"
                                },
                                "seLinuxOptions": {
                                    "description": "SELinuxOptions are the labels to be applied to the container",
                                    "properties": {
                                        "level": {
                                            "description": "Level is SELinux level label that applies to the container.",
                                            "type": "string"
                                        },
                                        "role": {
                                            "description": "Role is a SELinux role label that applies to the container.",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Type is a SELinux type label that applies to the container.",
                                            "type": "string"
                                        },
                                        "user": {
                                            "description": "User is a SELinux user label that applies to the container.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "seccompProfile": {
                                    "description": "SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.",
                                    "properties": {
                                        "localhostProfile": {
                                            "description": "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is \"Localhost\". Must NOT be set for any other type.",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "type indicates which kind of seccomp profile will be applied. Valid options are:\n\nLocalhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "type"
                                    ],
                                    "type": "object",
                                    "x-kubernetes-unions": [
                                        {
                                            "discriminator": "type",
                                            "fields-to-discriminateBy": {
                                                "localhostProfile": "LocalhostProfile"
                                            }
                                        }
                                    ]
                                },
                                "windowsOptions": {
                                    "description": "WindowsSecurityContextOptions contain Windows-specific options and credentials.",
                                    "properties": {
                                        "gmsaCredentialSpec": {
                                            "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
                                            "type": "string"
                                        },
                                        "gmsaCredentialSpecName": {
                                            "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                                            "type": "string"
                                        },
                                        "hostProcess": {
                                            "description": "HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.",
                                            "type": "boolean"
                                        },
                                        "runAsUserName": {
                                            "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "tolerations": {
                            "description": "Node tolerations for server scheduling to nodes with taints <br /> Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/",
                            "items": {
                                "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
                                "properties": {
                                    "effect": {
                                        "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                                        "type": "string"
                                    },
                                    "key": {
                                        "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                                        "type": "string"
                                    },
                                    "operator": {
                                        "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                                        "type": "string"
                                    },
                                    "tolerationSeconds": {
                                        "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "value": {
                                        "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "required": [],
                            "title": "tolerations"
                        },
                        "topologySpreadConstraints": {
                            "description": "Topology Spread Constraints for pod assignment <br /> Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#pod-topology-spread-constraints",
                            "items": {
                                "description": "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
                                "properties": {
                                    "labelSelector": {
                                        "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                        "properties": {
                                            "matchExpressions": {
                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                "items": {
                                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                    "properties": {
                                                        "key": {
                                                            "description": "key is the label key that the selector applies to.",
                                                            "type": "string"
                                                        },
                                                        "operator": {
                                                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                            "type": "string"
                                                        },
                                                        "values": {
                                                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array",
                                                            "x-kubernetes-list-type": "atomic"
                                                        }
                                                    },
                                                    "required": [
                                                        "key",
                                                        "operator"
                                                    ],
                                                    "type": "object"
                                                },
                                                "type": "array",
                                                "x-kubernetes-list-type": "atomic"
                                            },
                                            "matchLabels": {
                                                "additionalProperties": {
                                                    "type": "string"
                                                },
                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                "type": "object"
                                            }
                                        },
                                        "type": "object",
                                        "x-kubernetes-map-type": "atomic"
                                    },
                                    "matchLabelKeys": {
                                        "description": "MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. MatchLabelKeys cannot be set when LabelSelector isn't set. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.\n\nThis is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "x-kubernetes-list-type": "atomic"
                                    },
                                    "maxSkew": {
                                        "description": "MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "minDomains": {
                                        "description": "MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats \"global minimum\" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.\n\nFor example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so \"global minimum\" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "nodeAffinityPolicy": {
                                        "description": "NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.\n\nIf this value is nil, the behavior is equivalent to the Honor policy.",
                                        "type": "string"
                                    },
                                    "nodeTaintsPolicy": {
                                        "description": "NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.\n\nIf this value is nil, the behavior is equivalent to the Ignore policy.",
                                        "type": "string"
                                    },
                                    "topologyKey": {
                                        "description": "TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a \"bucket\", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is \"kubernetes.io/hostname\", each Node is a domain of that topology. And, if TopologyKey is \"topology.kubernetes.io/zone\", each zone is a domain of that topology. It's a required field.",
                                        "type": "string"
                                    },
                                    "whenUnsatisfiable": {
                                        "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,\n  but giving higher precedence to topologies that would help reduce the\n  skew.\nA constraint is considered \"Unsatisfiable\" for an incoming pod if and only if every possible node assignment for that pod would violate \"MaxSkew\" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "maxSkew",
                                    "topologyKey",
                                    "whenUnsatisfiable"
                                ],
                                "type": "object"
                            },
                            "required": [],
                            "title": "topologySpreadConstraints"
                        }
                    },
                    "required": [],
                    "title": "epp"
                },
                "fullnameOverride": {
                    "default": "",
                    "description": "String to fully override modelservice.fullname",
                    "required": [],
                    "title": "fullnameOverride"
                },
                "image": {
                    "additionalProperties": false,
                    "default": "See below",
                    "description": "Modelservice controller image, please change only if appropriate adjustments to the CRD are being made",
                    "properties": {
                        "imagePullPolicy": {
                            "default": "Always",
                            "description": "Specify a imagePullPolicy",
                            "required": [],
                            "title": "imagePullPolicy"
                        },
                        "pullSecrets": {
                            "description": "Optionally specify an array of imagePullSecrets (evaluated as templates)",
                            "items": {
                                "required": [],
                                "type": "string"
                            },
                            "required": [],
                            "title": "pullSecrets"
                        },
                        "registry": {
                            "default": "ghcr.io",
                            "description": "Model Service controller image registry",
                            "required": [],
                            "title": "registry"
                        },
                        "repository": {
                            "default": "llm-d/llm-d-model-service",
                            "description": "Model Service controller image repository",
                            "required": [],
                            "title": "repository"
                        },
                        "tag": {
                            "default": "0.0.10",
                            "description": "Model Service controller image tag",
                            "required": [],
                            "title": "tag"
                        }
                    },
                    "required": [],
                    "title": "image"
                },
                "inferenceSimulator": {
                    "additionalProperties": false,
                    "default": "See below",
                    "description": "llm-d inference simulator container options",
                    "properties": {
                        "containerSecurityContext": {
                            "description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
                            "properties": {
                                "allowPrivilegeEscalation": {
                                    "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.",
                                    "type": "boolean"
                                },
                                "appArmorProfile": {
                                    "description": "AppArmorProfile defines a pod or container's AppArmor settings.",
                                    "properties": {
                                        "localhostProfile": {
                                            "description": "localhostProfile indicates a profile loaded on the node that should be used. The profile must be preconfigured on the node to work. Must match the loaded name of the profile. Must be set if and only if type is \"Localhost\".",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "type indicates which kind of AppArmor profile will be applied. Valid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement.",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "type"
                                    ],
                                    "type": "object",
                                    "x-kubernetes-unions": [
                                        {
                                            "discriminator": "type",
                                            "fields-to-discriminateBy": {
                                                "localhostProfile": "LocalhostProfile"
                                            }
                                        }
                                    ]
                                },
                                "capabilities": {
                                    "description": "Adds and removes POSIX capabilities from running containers.",
                                    "properties": {
                                        "add": {
                                            "description": "Added capabilities",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array",
                                            "x-kubernetes-list-type": "atomic"
                                        },
                                        "drop": {
                                            "description": "Removed capabilities",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array",
                                            "x-kubernetes-list-type": "atomic"
                                        }
                                    },
                                    "type": "object"
                                },
                                "privileged": {
                                    "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.",
                                    "type": "boolean"
                                },
                                "procMount": {
                                    "description": "procMount denotes the type of proc mount to use for the containers. The default value is Default which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.",
                                    "type": "string"
                                },
                                "readOnlyRootFilesystem": {
                                    "description": "Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.",
                                    "type": "boolean"
                                },
                                "runAsGroup": {
                                    "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                                    "format": "int64",
                                    "type": "integer"
                                },
                                "runAsNonRoot": {
                                    "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                    "type": "boolean"
                                },
                                "runAsUser": {
                                    "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                                    "format": "int64",
                                    "type": "integer"
                                },
                                "seLinuxOptions": {
                                    "description": "SELinuxOptions are the labels to be applied to the container",
                                    "properties": {
                                        "level": {
                                            "description": "Level is SELinux level label that applies to the container.",
                                            "type": "string"
                                        },
                                        "role": {
                                            "description": "Role is a SELinux role label that applies to the container.",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Type is a SELinux type label that applies to the container.",
                                            "type": "string"
                                        },
                                        "user": {
                                            "description": "User is a SELinux user label that applies to the container.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "seccompProfile": {
                                    "description": "SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.",
                                    "properties": {
                                        "localhostProfile": {
                                            "description": "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is \"Localhost\". Must NOT be set for any other type.",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "type indicates which kind of seccomp profile will be applied. Valid options are:\n\nLocalhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "type"
                                    ],
                                    "type": "object",
                                    "x-kubernetes-unions": [
                                        {
                                            "discriminator": "type",
                                            "fields-to-discriminateBy": {
                                                "localhostProfile": "LocalhostProfile"
                                            }
                                        }
                                    ]
                                },
                                "windowsOptions": {
                                    "description": "WindowsSecurityContextOptions contain Windows-specific options and credentials.",
                                    "properties": {
                                        "gmsaCredentialSpec": {
                                            "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
                                            "type": "string"
                                        },
                                        "gmsaCredentialSpecName": {
                                            "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                                            "type": "string"
                                        },
                                        "hostProcess": {
                                            "description": "HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.",
                                            "type": "boolean"
                                        },
                                        "runAsUserName": {
                                            "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "image": {
                            "additionalProperties": false,
                            "default": "See below",
                            "description": "llm-d inference simulator image used in ModelService CR presets",
                            "properties": {
                                "imagePullPolicy": {
                                    "default": "IfNotPresent",
                                    "description": "Specify a imagePullPolicy",
                                    "required": [],
                                    "title": "imagePullPolicy"
                                },
                                "pullSecrets": {
                                    "description": "Optionally specify an array of imagePullSecrets (evaluated as templates)",
                                    "items": {
                                        "required": [],
                                        "type": "string"
                                    },
                                    "required": [],
                                    "title": "pullSecrets"
                                },
                                "registry": {
                                    "default": "ghcr.io",
                                    "description": "llm-d inference simulator image registry",
                                    "required": [],
                                    "title": "registry"
                                },
                                "repository": {
                                    "default": "llm-d/llm-d-inference-sim",
                                    "description": "llm-d inference simulator image repository",
                                    "required": [],
                                    "title": "repository"
                                },
                                "tag": {
                                    "default": "0.0.4",
                                    "description": "llm-d inference simulator image tag",
                                    "required": [],
                                    "title": "tag"
                                }
                            },
                            "required": [],
                            "title": "image"
                        }
                    },
                    "required": [],
                    "title": "inferenceSimulator"
                },
                "metrics": {
                    "additionalProperties": false,
                    "description": "Enable metrics gathering via podMonitor / ServiceMonitor",
                    "properties": {
                        "enabled": {
                            "default": "true",
                            "description": "Enable metrics scraping from prefill and decode services, see `model",
                            "required": [],
                            "title": "enabled"
                        },
                        "serviceMonitor": {
                            "additionalProperties": false,
                            "default": "See below",
                            "description": "Prometheus ServiceMonitor configuration <br /> Ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api-reference/api.md",
                            "properties": {
                                "annotations": {
                                    "additionalProperties": true,
                                    "description": "Additional annotations provided to the ServiceMonitor",
                                    "required": [],
                                    "title": "annotations"
                                },
                                "interval": {
                                    "default": "15s",
                                    "description": "ServiceMonitor endpoint interval at which metrics should be scraped",
                                    "required": [],
                                    "title": "interval"
                                },
                                "labels": {
                                    "additionalProperties": true,
                                    "description": "Additional labels provided to the ServiceMonitor",
                                    "required": [],
                                    "title": "labels"
                                },
                                "namespaceSelector": {
                                    "additionalProperties": false,
                                    "description": "ServiceMonitor namespace selector",
                                    "properties": {
                                        "any": {
                                            "default": false,
                                            "required": [],
                                            "title": "any",
                                            "type": "boolean"
                                        },
                                        "matchNames": {
                                            "description": " items:   type: string @schema",
                                            "items": {
                                                "required": [],
                                                "type": "string"
                                            },
                                            "required": [],
                                            "title": "matchNames"
                                        }
                                    },
                                    "required": [],
                                    "title": "namespaceSelector"
                                },
                                "path": {
                                    "default": "/metrics",
                                    "description": "ServiceMonitor endpoint path",
                                    "required": [],
                                    "title": "path"
                                },
                                "port": {
                                    "default": "vllm",
                                    "description": "ServiceMonitor endpoint port",
                                    "required": [],
                                    "title": "port"
                                },
                                "selector": {
                                    "additionalProperties": false,
                                    "description": "ServiceMonitor selector matchLabels </br> matchLabels must match labels on modelservice Services",
                                    "properties": {
                                        "matchLabels": {
                                            "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                            "properties": {
                                                "matchExpressions": {
                                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                    "items": {
                                                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                        "properties": {
                                                            "key": {
                                                                "description": "key is the label key that the selector applies to.",
                                                                "type": "string"
                                                            },
                                                            "operator": {
                                                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                "type": "string"
                                                            },
                                                            "values": {
                                                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            }
                                                        },
                                                        "required": [
                                                            "key",
                                                            "operator"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "type": "array",
                                                    "x-kubernetes-list-type": "atomic"
                                                },
                                                "matchLabels": {
                                                    "additionalProperties": {
                                                        "type": "string"
                                                    },
                                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object",
                                            "x-kubernetes-map-type": "atomic"
                                        }
                                    },
                                    "required": [],
                                    "title": "selector"
                                }
                            },
                            "required": [],
                            "title": "serviceMonitor"
                        }
                    },
                    "required": [],
                    "title": "metrics"
                },
                "nameOverride": {
                    "default": "",
                    "description": "String to partially override modelservice.fullname",
                    "required": [],
                    "title": "nameOverride"
                },
                "nodeSelector": {
                    "additionalProperties": true,
                    "description": "Node labels for pod assignment <br /> Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector",
                    "required": [],
                    "title": "nodeSelector"
                },
                "podAnnotations": {
                    "additionalProperties": true,
                    "description": "Pod annotations for modelservice",
                    "required": [],
                    "title": "podAnnotations"
                },
                "podLabels": {
                    "additionalProperties": true,
                    "description": "Pod labels for modelservice",
                    "required": [],
                    "title": "podLabels"
                },
                "podSecurityContext": {
                    "description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
                    "properties": {
                        "allowPrivilegeEscalation": {
                            "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.",
                            "type": "boolean"
                        },
                        "appArmorProfile": {
                            "description": "AppArmorProfile defines a pod or container's AppArmor settings.",
                            "properties": {
                                "localhostProfile": {
                                    "description": "localhostProfile indicates a profile loaded on the node that should be used. The profile must be preconfigured on the node to work. Must match the loaded name of the profile. Must be set if and only if type is \"Localhost\".",
                                    "type": "string"
                                },
                                "type": {
                                    "description": "type indicates which kind of AppArmor profile will be applied. Valid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement.",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "type"
                            ],
                            "type": "object",
                            "x-kubernetes-unions": [
                                {
                                    "discriminator": "type",
                                    "fields-to-discriminateBy": {
                                        "localhostProfile": "LocalhostProfile"
                                    }
                                }
                            ]
                        },
                        "capabilities": {
                            "description": "Adds and removes POSIX capabilities from running containers.",
                            "properties": {
                                "add": {
                                    "description": "Added capabilities",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array",
                                    "x-kubernetes-list-type": "atomic"
                                },
                                "drop": {
                                    "description": "Removed capabilities",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array",
                                    "x-kubernetes-list-type": "atomic"
                                }
                            },
                            "type": "object"
                        },
                        "privileged": {
                            "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.",
                            "type": "boolean"
                        },
                        "procMount": {
                            "description": "procMount denotes the type of proc mount to use for the containers. The default value is Default which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.",
                            "type": "string"
                        },
                        "readOnlyRootFilesystem": {
                            "description": "Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.",
                            "type": "boolean"
                        },
                        "runAsGroup": {
                            "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                            "format": "int64",
                            "type": "integer"
                        },
                        "runAsNonRoot": {
                            "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                            "type": "boolean"
                        },
                        "runAsUser": {
                            "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                            "format": "int64",
                            "type": "integer"
                        },
                        "seLinuxOptions": {
                            "description": "SELinuxOptions are the labels to be applied to the container",
                            "properties": {
                                "level": {
                                    "description": "Level is SELinux level label that applies to the container.",
                                    "type": "string"
                                },
                                "role": {
                                    "description": "Role is a SELinux role label that applies to the container.",
                                    "type": "string"
                                },
                                "type": {
                                    "description": "Type is a SELinux type label that applies to the container.",
                                    "type": "string"
                                },
                                "user": {
                                    "description": "User is a SELinux user label that applies to the container.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "seccompProfile": {
                            "description": "SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.",
                            "properties": {
                                "localhostProfile": {
                                    "description": "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is \"Localhost\". Must NOT be set for any other type.",
                                    "type": "string"
                                },
                                "type": {
                                    "description": "type indicates which kind of seccomp profile will be applied. Valid options are:\n\nLocalhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "type"
                            ],
                            "type": "object",
                            "x-kubernetes-unions": [
                                {
                                    "discriminator": "type",
                                    "fields-to-discriminateBy": {
                                        "localhostProfile": "LocalhostProfile"
                                    }
                                }
                            ]
                        },
                        "windowsOptions": {
                            "description": "WindowsSecurityContextOptions contain Windows-specific options and credentials.",
                            "properties": {
                                "gmsaCredentialSpec": {
                                    "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
                                    "type": "string"
                                },
                                "gmsaCredentialSpecName": {
                                    "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                                    "type": "string"
                                },
                                "hostProcess": {
                                    "description": "HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.",
                                    "type": "boolean"
                                },
                                "runAsUserName": {
                                    "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "prefill": {
                    "additionalProperties": false,
                    "default": "See below",
                    "description": "Prefill options",
                    "properties": {
                        "affinity": {
                            "additionalProperties": false,
                            "description": "Affinity for pod assignment <br /> Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity",
                            "properties": {
                                "nodeAffinity": {
                                    "description": "Node affinity is a group of node affinity scheduling rules.",
                                    "properties": {
                                        "preferredDuringSchedulingIgnoredDuringExecution": {
                                            "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
                                            "items": {
                                                "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                                                "properties": {
                                                    "preference": {
                                                        "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                                                        "properties": {
                                                            "matchExpressions": {
                                                                "description": "A list of node selector requirements by node's labels.",
                                                                "items": {
                                                                    "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                    "properties": {
                                                                        "key": {
                                                                            "description": "The label key that the selector applies to.",
                                                                            "type": "string"
                                                                        },
                                                                        "operator": {
                                                                            "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                                            "type": "string"
                                                                        },
                                                                        "values": {
                                                                            "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array",
                                                                            "x-kubernetes-list-type": "atomic"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "key",
                                                                        "operator"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "matchFields": {
                                                                "description": "A list of node selector requirements by node's fields.",
                                                                "items": {
                                                                    "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                    "properties": {
                                                                        "key": {
                                                                            "description": "The label key that the selector applies to.",
                                                                            "type": "string"
                                                                        },
                                                                        "operator": {
                                                                            "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                                            "type": "string"
                                                                        },
                                                                        "values": {
                                                                            "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array",
                                                                            "x-kubernetes-list-type": "atomic"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "key",
                                                                        "operator"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            }
                                                        },
                                                        "type": "object",
                                                        "x-kubernetes-map-type": "atomic"
                                                    },
                                                    "weight": {
                                                        "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                },
                                                "required": [
                                                    "weight",
                                                    "preference"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array",
                                            "x-kubernetes-list-type": "atomic"
                                        },
                                        "requiredDuringSchedulingIgnoredDuringExecution": {
                                            "description": "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.",
                                            "properties": {
                                                "nodeSelectorTerms": {
                                                    "description": "Required. A list of node selector terms. The terms are ORed.",
                                                    "items": {
                                                        "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                                                        "properties": {
                                                            "matchExpressions": {
                                                                "description": "A list of node selector requirements by node's labels.",
                                                                "items": {
                                                                    "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                    "properties": {
                                                                        "key": {
                                                                            "description": "The label key that the selector applies to.",
                                                                            "type": "string"
                                                                        },
                                                                        "operator": {
                                                                            "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                                            "type": "string"
                                                                        },
                                                                        "values": {
                                                                            "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array",
                                                                            "x-kubernetes-list-type": "atomic"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "key",
                                                                        "operator"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "matchFields": {
                                                                "description": "A list of node selector requirements by node's fields.",
                                                                "items": {
                                                                    "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                    "properties": {
                                                                        "key": {
                                                                            "description": "The label key that the selector applies to.",
                                                                            "type": "string"
                                                                        },
                                                                        "operator": {
                                                                            "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                                            "type": "string"
                                                                        },
                                                                        "values": {
                                                                            "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array",
                                                                            "x-kubernetes-list-type": "atomic"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "key",
                                                                        "operator"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            }
                                                        },
                                                        "type": "object",
                                                        "x-kubernetes-map-type": "atomic"
                                                    },
                                                    "type": "array",
                                                    "x-kubernetes-list-type": "atomic"
                                                }
                                            },
                                            "required": [
                                                "nodeSelectorTerms"
                                            ],
                                            "type": "object",
                                            "x-kubernetes-map-type": "atomic"
                                        }
                                    },
                                    "type": "object"
                                },
                                "podAffinity": {
                                    "description": "Pod affinity is a group of inter pod affinity scheduling rules.",
                                    "properties": {
                                        "preferredDuringSchedulingIgnoredDuringExecution": {
                                            "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                                            "items": {
                                                "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                                                "properties": {
                                                    "podAffinityTerm": {
                                                        "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                                        "properties": {
                                                            "labelSelector": {
                                                                "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                                                "properties": {
                                                                    "matchExpressions": {
                                                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                                        "items": {
                                                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                            "properties": {
                                                                                "key": {
                                                                                    "description": "key is the label key that the selector applies to.",
                                                                                    "type": "string"
                                                                                },
                                                                                "operator": {
                                                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                                    "type": "string"
                                                                                },
                                                                                "values": {
                                                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "type": "array",
                                                                                    "x-kubernetes-list-type": "atomic"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "key",
                                                                                "operator"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array",
                                                                        "x-kubernetes-list-type": "atomic"
                                                                    },
                                                                    "matchLabels": {
                                                                        "additionalProperties": {
                                                                            "type": "string"
                                                                        },
                                                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object",
                                                                "x-kubernetes-map-type": "atomic"
                                                            },
                                                            "matchLabelKeys": {
                                                                "description": "MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both matchLabelKeys and labelSelector. Also, matchLabelKeys cannot be set when labelSelector isn't set.",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "mismatchLabelKeys": {
                                                                "description": "MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both mismatchLabelKeys and labelSelector. Also, mismatchLabelKeys cannot be set when labelSelector isn't set.",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "namespaceSelector": {
                                                                "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                                                "properties": {
                                                                    "matchExpressions": {
                                                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                                        "items": {
                                                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                            "properties": {
                                                                                "key": {
                                                                                    "description": "key is the label key that the selector applies to.",
                                                                                    "type": "string"
                                                                                },
                                                                                "operator": {
                                                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                                    "type": "string"
                                                                                },
                                                                                "values": {
                                                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "type": "array",
                                                                                    "x-kubernetes-list-type": "atomic"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "key",
                                                                                "operator"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array",
                                                                        "x-kubernetes-list-type": "atomic"
                                                                    },
                                                                    "matchLabels": {
                                                                        "additionalProperties": {
                                                                            "type": "string"
                                                                        },
                                                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object",
                                                                "x-kubernetes-map-type": "atomic"
                                                            },
                                                            "namespaces": {
                                                                "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "topologyKey": {
                                                                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "topologyKey"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "weight": {
                                                        "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                },
                                                "required": [
                                                    "weight",
                                                    "podAffinityTerm"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array",
                                            "x-kubernetes-list-type": "atomic"
                                        },
                                        "requiredDuringSchedulingIgnoredDuringExecution": {
                                            "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                                            "items": {
                                                "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                                "properties": {
                                                    "labelSelector": {
                                                        "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                                        "properties": {
                                                            "matchExpressions": {
                                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                                "items": {
                                                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                    "properties": {
                                                                        "key": {
                                                                            "description": "key is the label key that the selector applies to.",
                                                                            "type": "string"
                                                                        },
                                                                        "operator": {
                                                                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                            "type": "string"
                                                                        },
                                                                        "values": {
                                                                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array",
                                                                            "x-kubernetes-list-type": "atomic"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "key",
                                                                        "operator"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "matchLabels": {
                                                                "additionalProperties": {
                                                                    "type": "string"
                                                                },
                                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object",
                                                        "x-kubernetes-map-type": "atomic"
                                                    },
                                                    "matchLabelKeys": {
                                                        "description": "MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both matchLabelKeys and labelSelector. Also, matchLabelKeys cannot be set when labelSelector isn't set.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "mismatchLabelKeys": {
                                                        "description": "MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both mismatchLabelKeys and labelSelector. Also, mismatchLabelKeys cannot be set when labelSelector isn't set.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "namespaceSelector": {
                                                        "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                                        "properties": {
                                                            "matchExpressions": {
                                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                                "items": {
                                                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                    "properties": {
                                                                        "key": {
                                                                            "description": "key is the label key that the selector applies to.",
                                                                            "type": "string"
                                                                        },
                                                                        "operator": {
                                                                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                            "type": "string"
                                                                        },
                                                                        "values": {
                                                                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array",
                                                                            "x-kubernetes-list-type": "atomic"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "key",
                                                                        "operator"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "matchLabels": {
                                                                "additionalProperties": {
                                                                    "type": "string"
                                                                },
                                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object",
                                                        "x-kubernetes-map-type": "atomic"
                                                    },
                                                    "namespaces": {
                                                        "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "topologyKey": {
                                                        "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "topologyKey"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array",
                                            "x-kubernetes-list-type": "atomic"
                                        }
                                    },
                                    "type": "object"
                                },
                                "podAntiAffinity": {
                                    "description": "Pod anti affinity is a group of inter pod anti affinity scheduling rules.",
                                    "properties": {
                                        "preferredDuringSchedulingIgnoredDuringExecution": {
                                            "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and subtracting \"weight\" from the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                                            "items": {
                                                "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                                                "properties": {
                                                    "podAffinityTerm": {
                                                        "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                                        "properties": {
                                                            "labelSelector": {
                                                                "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                                                "properties": {
                                                                    "matchExpressions": {
                                                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                                        "items": {
                                                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                            "properties": {
                                                                                "key": {
                                                                                    "description": "key is the label key that the selector applies to.",
                                                                                    "type": "string"
                                                                                },
                                                                                "operator": {
                                                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                                    "type": "string"
                                                                                },
                                                                                "values": {
                                                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "type": "array",
                                                                                    "x-kubernetes-list-type": "atomic"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "key",
                                                                                "operator"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array",
                                                                        "x-kubernetes-list-type": "atomic"
                                                                    },
                                                                    "matchLabels": {
                                                                        "additionalProperties": {
                                                                            "type": "string"
                                                                        },
                                                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object",
                                                                "x-kubernetes-map-type": "atomic"
                                                            },
                                                            "matchLabelKeys": {
                                                                "description": "MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both matchLabelKeys and labelSelector. Also, matchLabelKeys cannot be set when labelSelector isn't set.",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "mismatchLabelKeys": {
                                                                "description": "MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both mismatchLabelKeys and labelSelector. Also, mismatchLabelKeys cannot be set when labelSelector isn't set.",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "namespaceSelector": {
                                                                "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                                                "properties": {
                                                                    "matchExpressions": {
                                                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                                        "items": {
                                                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                            "properties": {
                                                                                "key": {
                                                                                    "description": "key is the label key that the selector applies to.",
                                                                                    "type": "string"
                                                                                },
                                                                                "operator": {
                                                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                                    "type": "string"
                                                                                },
                                                                                "values": {
                                                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "type": "array",
                                                                                    "x-kubernetes-list-type": "atomic"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "key",
                                                                                "operator"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array",
                                                                        "x-kubernetes-list-type": "atomic"
                                                                    },
                                                                    "matchLabels": {
                                                                        "additionalProperties": {
                                                                            "type": "string"
                                                                        },
                                                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object",
                                                                "x-kubernetes-map-type": "atomic"
                                                            },
                                                            "namespaces": {
                                                                "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "topologyKey": {
                                                                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "topologyKey"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "weight": {
                                                        "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                },
                                                "required": [
                                                    "weight",
                                                    "podAffinityTerm"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array",
                                            "x-kubernetes-list-type": "atomic"
                                        },
                                        "requiredDuringSchedulingIgnoredDuringExecution": {
                                            "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                                            "items": {
                                                "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                                "properties": {
                                                    "labelSelector": {
                                                        "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                                        "properties": {
                                                            "matchExpressions": {
                                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                                "items": {
                                                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                    "properties": {
                                                                        "key": {
                                                                            "description": "key is the label key that the selector applies to.",
                                                                            "type": "string"
                                                                        },
                                                                        "operator": {
                                                                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                            "type": "string"
                                                                        },
                                                                        "values": {
                                                                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array",
                                                                            "x-kubernetes-list-type": "atomic"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "key",
                                                                        "operator"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "matchLabels": {
                                                                "additionalProperties": {
                                                                    "type": "string"
                                                                },
                                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object",
                                                        "x-kubernetes-map-type": "atomic"
                                                    },
                                                    "matchLabelKeys": {
                                                        "description": "MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both matchLabelKeys and labelSelector. Also, matchLabelKeys cannot be set when labelSelector isn't set.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "mismatchLabelKeys": {
                                                        "description": "MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both mismatchLabelKeys and labelSelector. Also, mismatchLabelKeys cannot be set when labelSelector isn't set.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "namespaceSelector": {
                                                        "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                                        "properties": {
                                                            "matchExpressions": {
                                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                                "items": {
                                                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                    "properties": {
                                                                        "key": {
                                                                            "description": "key is the label key that the selector applies to.",
                                                                            "type": "string"
                                                                        },
                                                                        "operator": {
                                                                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                            "type": "string"
                                                                        },
                                                                        "values": {
                                                                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "type": "array",
                                                                            "x-kubernetes-list-type": "atomic"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "key",
                                                                        "operator"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array",
                                                                "x-kubernetes-list-type": "atomic"
                                                            },
                                                            "matchLabels": {
                                                                "additionalProperties": {
                                                                    "type": "string"
                                                                },
                                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object",
                                                        "x-kubernetes-map-type": "atomic"
                                                    },
                                                    "namespaces": {
                                                        "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "topologyKey": {
                                                        "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "topologyKey"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array",
                                            "x-kubernetes-list-type": "atomic"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "required": [],
                            "title": "affinity"
                        },
                        "containerSecurityContext": {
                            "description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
                            "properties": {
                                "allowPrivilegeEscalation": {
                                    "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.",
                                    "type": "boolean"
                                },
                                "appArmorProfile": {
                                    "description": "AppArmorProfile defines a pod or container's AppArmor settings.",
                                    "properties": {
                                        "localhostProfile": {
                                            "description": "localhostProfile indicates a profile loaded on the node that should be used. The profile must be preconfigured on the node to work. Must match the loaded name of the profile. Must be set if and only if type is \"Localhost\".",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "type indicates which kind of AppArmor profile will be applied. Valid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement.",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "type"
                                    ],
                                    "type": "object",
                                    "x-kubernetes-unions": [
                                        {
                                            "discriminator": "type",
                                            "fields-to-discriminateBy": {
                                                "localhostProfile": "LocalhostProfile"
                                            }
                                        }
                                    ]
                                },
                                "capabilities": {
                                    "description": "Adds and removes POSIX capabilities from running containers.",
                                    "properties": {
                                        "add": {
                                            "description": "Added capabilities",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array",
                                            "x-kubernetes-list-type": "atomic"
                                        },
                                        "drop": {
                                            "description": "Removed capabilities",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array",
                                            "x-kubernetes-list-type": "atomic"
                                        }
                                    },
                                    "type": "object"
                                },
                                "privileged": {
                                    "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.",
                                    "type": "boolean"
                                },
                                "procMount": {
                                    "description": "procMount denotes the type of proc mount to use for the containers. The default value is Default which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.",
                                    "type": "string"
                                },
                                "readOnlyRootFilesystem": {
                                    "description": "Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.",
                                    "type": "boolean"
                                },
                                "runAsGroup": {
                                    "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                                    "format": "int64",
                                    "type": "integer"
                                },
                                "runAsNonRoot": {
                                    "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                    "type": "boolean"
                                },
                                "runAsUser": {
                                    "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                                    "format": "int64",
                                    "type": "integer"
                                },
                                "seLinuxOptions": {
                                    "description": "SELinuxOptions are the labels to be applied to the container",
                                    "properties": {
                                        "level": {
                                            "description": "Level is SELinux level label that applies to the container.",
                                            "type": "string"
                                        },
                                        "role": {
                                            "description": "Role is a SELinux role label that applies to the container.",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Type is a SELinux type label that applies to the container.",
                                            "type": "string"
                                        },
                                        "user": {
                                            "description": "User is a SELinux user label that applies to the container.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "seccompProfile": {
                                    "description": "SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.",
                                    "properties": {
                                        "localhostProfile": {
                                            "description": "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is \"Localhost\". Must NOT be set for any other type.",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "type indicates which kind of seccomp profile will be applied. Valid options are:\n\nLocalhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "type"
                                    ],
                                    "type": "object",
                                    "x-kubernetes-unions": [
                                        {
                                            "discriminator": "type",
                                            "fields-to-discriminateBy": {
                                                "localhostProfile": "LocalhostProfile"
                                            }
                                        }
                                    ]
                                },
                                "windowsOptions": {
                                    "description": "WindowsSecurityContextOptions contain Windows-specific options and credentials.",
                                    "properties": {
                                        "gmsaCredentialSpec": {
                                            "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
                                            "type": "string"
                                        },
                                        "gmsaCredentialSpecName": {
                                            "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                                            "type": "string"
                                        },
                                        "hostProcess": {
                                            "description": "HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.",
                                            "type": "boolean"
                                        },
                                        "runAsUserName": {
                                            "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "nodeSelector": {
                            "additionalProperties": true,
                            "description": "Node labels for pod assignment <br /> Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector",
                            "required": [],
                            "title": "nodeSelector"
                        },
                        "podSecurityContext": {
                            "description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
                            "properties": {
                                "allowPrivilegeEscalation": {
                                    "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.",
                                    "type": "boolean"
                                },
                                "appArmorProfile": {
                                    "description": "AppArmorProfile defines a pod or container's AppArmor settings.",
                                    "properties": {
                                        "localhostProfile": {
                                            "description": "localhostProfile indicates a profile loaded on the node that should be used. The profile must be preconfigured on the node to work. Must match the loaded name of the profile. Must be set if and only if type is \"Localhost\".",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "type indicates which kind of AppArmor profile will be applied. Valid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement.",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "type"
                                    ],
                                    "type": "object",
                                    "x-kubernetes-unions": [
                                        {
                                            "discriminator": "type",
                                            "fields-to-discriminateBy": {
                                                "localhostProfile": "LocalhostProfile"
                                            }
                                        }
                                    ]
                                },
                                "capabilities": {
                                    "description": "Adds and removes POSIX capabilities from running containers.",
                                    "properties": {
                                        "add": {
                                            "description": "Added capabilities",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array",
                                            "x-kubernetes-list-type": "atomic"
                                        },
                                        "drop": {
                                            "description": "Removed capabilities",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array",
                                            "x-kubernetes-list-type": "atomic"
                                        }
                                    },
                                    "type": "object"
                                },
                                "privileged": {
                                    "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.",
                                    "type": "boolean"
                                },
                                "procMount": {
                                    "description": "procMount denotes the type of proc mount to use for the containers. The default value is Default which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.",
                                    "type": "string"
                                },
                                "readOnlyRootFilesystem": {
                                    "description": "Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.",
                                    "type": "boolean"
                                },
                                "runAsGroup": {
                                    "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                                    "format": "int64",
                                    "type": "integer"
                                },
                                "runAsNonRoot": {
                                    "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                    "type": "boolean"
                                },
                                "runAsUser": {
                                    "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                                    "format": "int64",
                                    "type": "integer"
                                },
                                "seLinuxOptions": {
                                    "description": "SELinuxOptions are the labels to be applied to the container",
                                    "properties": {
                                        "level": {
                                            "description": "Level is SELinux level label that applies to the container.",
                                            "type": "string"
                                        },
                                        "role": {
                                            "description": "Role is a SELinux role label that applies to the container.",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Type is a SELinux type label that applies to the container.",
                                            "type": "string"
                                        },
                                        "user": {
                                            "description": "User is a SELinux user label that applies to the container.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "seccompProfile": {
                                    "description": "SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.",
                                    "properties": {
                                        "localhostProfile": {
                                            "description": "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is \"Localhost\". Must NOT be set for any other type.",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "type indicates which kind of seccomp profile will be applied. Valid options are:\n\nLocalhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "type"
                                    ],
                                    "type": "object",
                                    "x-kubernetes-unions": [
                                        {
                                            "discriminator": "type",
                                            "fields-to-discriminateBy": {
                                                "localhostProfile": "LocalhostProfile"
                                            }
                                        }
                                    ]
                                },
                                "windowsOptions": {
                                    "description": "WindowsSecurityContextOptions contain Windows-specific options and credentials.",
                                    "properties": {
                                        "gmsaCredentialSpec": {
                                            "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
                                            "type": "string"
                                        },
                                        "gmsaCredentialSpecName": {
                                            "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                                            "type": "string"
                                        },
                                        "hostProcess": {
                                            "description": "HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.",
                                            "type": "boolean"
                                        },
                                        "runAsUserName": {
                                            "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "tolerations": {
                            "description": "Node tolerations for server scheduling to nodes with taints <br /> Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/",
                            "items": {
                                "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
                                "properties": {
                                    "effect": {
                                        "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                                        "type": "string"
                                    },
                                    "key": {
                                        "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                                        "type": "string"
                                    },
                                    "operator": {
                                        "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                                        "type": "string"
                                    },
                                    "tolerationSeconds": {
                                        "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "value": {
                                        "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "required": [],
                            "title": "tolerations"
                        },
                        "topologySpreadConstraints": {
                            "description": "Topology Spread Constraints for pod assignment <br /> Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#pod-topology-spread-constraints",
                            "items": {
                                "description": "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
                                "properties": {
                                    "labelSelector": {
                                        "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                        "properties": {
                                            "matchExpressions": {
                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                "items": {
                                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                    "properties": {
                                                        "key": {
                                                            "description": "key is the label key that the selector applies to.",
                                                            "type": "string"
                                                        },
                                                        "operator": {
                                                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                            "type": "string"
                                                        },
                                                        "values": {
                                                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array",
                                                            "x-kubernetes-list-type": "atomic"
                                                        }
                                                    },
                                                    "required": [
                                                        "key",
                                                        "operator"
                                                    ],
                                                    "type": "object"
                                                },
                                                "type": "array",
                                                "x-kubernetes-list-type": "atomic"
                                            },
                                            "matchLabels": {
                                                "additionalProperties": {
                                                    "type": "string"
                                                },
                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                "type": "object"
                                            }
                                        },
                                        "type": "object",
                                        "x-kubernetes-map-type": "atomic"
                                    },
                                    "matchLabelKeys": {
                                        "description": "MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. MatchLabelKeys cannot be set when LabelSelector isn't set. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.\n\nThis is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "x-kubernetes-list-type": "atomic"
                                    },
                                    "maxSkew": {
                                        "description": "MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "minDomains": {
                                        "description": "MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats \"global minimum\" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.\n\nFor example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so \"global minimum\" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "nodeAffinityPolicy": {
                                        "description": "NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.\n\nIf this value is nil, the behavior is equivalent to the Honor policy.",
                                        "type": "string"
                                    },
                                    "nodeTaintsPolicy": {
                                        "description": "NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.\n\nIf this value is nil, the behavior is equivalent to the Ignore policy.",
                                        "type": "string"
                                    },
                                    "topologyKey": {
                                        "description": "TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a \"bucket\", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is \"kubernetes.io/hostname\", each Node is a domain of that topology. And, if TopologyKey is \"topology.kubernetes.io/zone\", each zone is a domain of that topology. It's a required field.",
                                        "type": "string"
                                    },
                                    "whenUnsatisfiable": {
                                        "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,\n  but giving higher precedence to topologies that would help reduce the\n  skew.\nA constraint is considered \"Unsatisfiable\" for an incoming pod if and only if every possible node assignment for that pod would violate \"MaxSkew\" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "maxSkew",
                                    "topologyKey",
                                    "whenUnsatisfiable"
                                ],
                                "type": "object"
                            },
                            "required": [],
                            "title": "topologySpreadConstraints"
                        },
                        "vllm": {
                            "additionalProperties": false,
                            "description": "vLLM container settings",
                            "properties": {
                                "containerSecurityContext": {
                                    "description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
                                    "properties": {
                                        "allowPrivilegeEscalation": {
                                            "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.",
                                            "type": "boolean"
                                        },
                                        "appArmorProfile": {
                                            "description": "AppArmorProfile defines a pod or container's AppArmor settings.",
                                            "properties": {
                                                "localhostProfile": {
                                                    "description": "localhostProfile indicates a profile loaded on the node that should be used. The profile must be preconfigured on the node to work. Must match the loaded name of the profile. Must be set if and only if type is \"Localhost\".",
                                                    "type": "string"
                                                },
                                                "type": {
                                                    "description": "type indicates which kind of AppArmor profile will be applied. Valid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement.",
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "type"
                                            ],
                                            "type": "object",
                                            "x-kubernetes-unions": [
                                                {
                                                    "discriminator": "type",
                                                    "fields-to-discriminateBy": {
                                                        "localhostProfile": "LocalhostProfile"
                                                    }
                                                }
                                            ]
                                        },
                                        "capabilities": {
                                            "description": "Adds and removes POSIX capabilities from running containers.",
                                            "properties": {
                                                "add": {
                                                    "description": "Added capabilities",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "type": "array",
                                                    "x-kubernetes-list-type": "atomic"
                                                },
                                                "drop": {
                                                    "description": "Removed capabilities",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "type": "array",
                                                    "x-kubernetes-list-type": "atomic"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "privileged": {
                                            "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.",
                                            "type": "boolean"
                                        },
                                        "procMount": {
                                            "description": "procMount denotes the type of proc mount to use for the containers. The default value is Default which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.",
                                            "type": "string"
                                        },
                                        "readOnlyRootFilesystem": {
                                            "description": "Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.",
                                            "type": "boolean"
                                        },
                                        "runAsGroup": {
                                            "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                                            "format": "int64",
                                            "type": "integer"
                                        },
                                        "runAsNonRoot": {
                                            "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                            "type": "boolean"
                                        },
                                        "runAsUser": {
                                            "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                                            "format": "int64",
                                            "type": "integer"
                                        },
                                        "seLinuxOptions": {
                                            "description": "SELinuxOptions are the labels to be applied to the container",
                                            "properties": {
                                                "level": {
                                                    "description": "Level is SELinux level label that applies to the container.",
                                                    "type": "string"
                                                },
                                                "role": {
                                                    "description": "Role is a SELinux role label that applies to the container.",
                                                    "type": "string"
                                                },
                                                "type": {
                                                    "description": "Type is a SELinux type label that applies to the container.",
                                                    "type": "string"
                                                },
                                                "user": {
                                                    "description": "User is a SELinux user label that applies to the container.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "seccompProfile": {
                                            "description": "SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.",
                                            "properties": {
                                                "localhostProfile": {
                                                    "description": "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is \"Localhost\". Must NOT be set for any other type.",
                                                    "type": "string"
                                                },
                                                "type": {
                                                    "description": "type indicates which kind of seccomp profile will be applied. Valid options are:\n\nLocalhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.",
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "type"
                                            ],
                                            "type": "object",
                                            "x-kubernetes-unions": [
                                                {
                                                    "discriminator": "type",
                                                    "fields-to-discriminateBy": {
                                                        "localhostProfile": "LocalhostProfile"
                                                    }
                                                }
                                            ]
                                        },
                                        "windowsOptions": {
                                            "description": "WindowsSecurityContextOptions contain Windows-specific options and credentials.",
                                            "properties": {
                                                "gmsaCredentialSpec": {
                                                    "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
                                                    "type": "string"
                                                },
                                                "gmsaCredentialSpecName": {
                                                    "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                                                    "type": "string"
                                                },
                                                "hostProcess": {
                                                    "description": "HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.",
                                                    "type": "boolean"
                                                },
                                                "runAsUserName": {
                                                    "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "required": [],
                            "title": "vllm"
                        }
                    },
                    "required": [],
                    "title": "prefill"
                },
                "rbac": {
                    "additionalProperties": false,
                    "properties": {
                        "create": {
                            "default": "true",
                            "description": "Enable the creation of RBAC resources",
                            "required": [],
                            "title": "create"
                        }
                    },
                    "required": [],
                    "title": "rbac",
                    "type": "object"
                },
                "replicas": {
                    "default": "1",
                    "description": "Number of controller replicas",
                    "required": [],
                    "title": "replicas"
                },
                "routingProxy": {
                    "additionalProperties": false,
                    "default": "See below",
                    "description": "Routing proxy container options",
                    "properties": {
                        "containerSecurityContext": {
                            "description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
                            "properties": {
                                "allowPrivilegeEscalation": {
                                    "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.",
                                    "type": "boolean"
                                },
                                "appArmorProfile": {
                                    "description": "AppArmorProfile defines a pod or container's AppArmor settings.",
                                    "properties": {
                                        "localhostProfile": {
                                            "description": "localhostProfile indicates a profile loaded on the node that should be used. The profile must be preconfigured on the node to work. Must match the loaded name of the profile. Must be set if and only if type is \"Localhost\".",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "type indicates which kind of AppArmor profile will be applied. Valid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement.",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "type"
                                    ],
                                    "type": "object",
                                    "x-kubernetes-unions": [
                                        {
                                            "discriminator": "type",
                                            "fields-to-discriminateBy": {
                                                "localhostProfile": "LocalhostProfile"
                                            }
                                        }
                                    ]
                                },
                                "capabilities": {
                                    "description": "Adds and removes POSIX capabilities from running containers.",
                                    "properties": {
                                        "add": {
                                            "description": "Added capabilities",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array",
                                            "x-kubernetes-list-type": "atomic"
                                        },
                                        "drop": {
                                            "description": "Removed capabilities",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array",
                                            "x-kubernetes-list-type": "atomic"
                                        }
                                    },
                                    "type": "object"
                                },
                                "privileged": {
                                    "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.",
                                    "type": "boolean"
                                },
                                "procMount": {
                                    "description": "procMount denotes the type of proc mount to use for the containers. The default value is Default which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.",
                                    "type": "string"
                                },
                                "readOnlyRootFilesystem": {
                                    "description": "Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.",
                                    "type": "boolean"
                                },
                                "runAsGroup": {
                                    "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                                    "format": "int64",
                                    "type": "integer"
                                },
                                "runAsNonRoot": {
                                    "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                    "type": "boolean"
                                },
                                "runAsUser": {
                                    "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                                    "format": "int64",
                                    "type": "integer"
                                },
                                "seLinuxOptions": {
                                    "description": "SELinuxOptions are the labels to be applied to the container",
                                    "properties": {
                                        "level": {
                                            "description": "Level is SELinux level label that applies to the container.",
                                            "type": "string"
                                        },
                                        "role": {
                                            "description": "Role is a SELinux role label that applies to the container.",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Type is a SELinux type label that applies to the container.",
                                            "type": "string"
                                        },
                                        "user": {
                                            "description": "User is a SELinux user label that applies to the container.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "seccompProfile": {
                                    "description": "SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.",
                                    "properties": {
                                        "localhostProfile": {
                                            "description": "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is \"Localhost\". Must NOT be set for any other type.",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "type indicates which kind of seccomp profile will be applied. Valid options are:\n\nLocalhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "type"
                                    ],
                                    "type": "object",
                                    "x-kubernetes-unions": [
                                        {
                                            "discriminator": "type",
                                            "fields-to-discriminateBy": {
                                                "localhostProfile": "LocalhostProfile"
                                            }
                                        }
                                    ]
                                },
                                "windowsOptions": {
                                    "description": "WindowsSecurityContextOptions contain Windows-specific options and credentials.",
                                    "properties": {
                                        "gmsaCredentialSpec": {
                                            "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
                                            "type": "string"
                                        },
                                        "gmsaCredentialSpecName": {
                                            "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                                            "type": "string"
                                        },
                                        "hostProcess": {
                                            "description": "HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.",
                                            "type": "boolean"
                                        },
                                        "runAsUserName": {
                                            "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "image": {
                            "additionalProperties": false,
                            "description": "Routing proxy image used in ModelService CR presets",
                            "properties": {
                                "imagePullPolicy": {
                                    "default": "IfNotPresent",
                                    "description": "Specify a imagePullPolicy",
                                    "required": [],
                                    "title": "imagePullPolicy"
                                },
                                "pullSecrets": {
                                    "description": "Optionally specify an array of imagePullSecrets (evaluated as templates)",
                                    "items": {
                                        "required": [],
                                        "type": "string"
                                    },
                                    "required": [],
                                    "title": "pullSecrets"
                                },
                                "registry": {
                                    "default": "ghcr.io",
                                    "description": "Routing proxy image registry",
                                    "required": [],
                                    "title": "registry"
                                },
                                "repository": {
                                    "default": "llm-d/llm-d-routing-sidecar",
                                    "description": "Routing proxy image repository",
                                    "required": [],
                                    "title": "repository"
                                },
                                "tag": {
                                    "default": "0.0.6",
                                    "description": "Routing proxy image tag",
                                    "required": [],
                                    "title": "tag"
                                }
                            },
                            "required": [],
                            "title": "image"
                        }
                    },
                    "required": [],
                    "title": "routingProxy"
                },
                "service": {
                    "additionalProperties": false,
                    "description": "Model service controller settings",
                    "properties": {
                        "enabled": {
                            "default": "true",
                            "description": "Toggle to deploy a Service resource for Model service controller",
                            "required": [],
                            "title": "enabled"
                        },
                        "port": {
                            "default": "8443",
                            "description": "Port number exposed from Model Service controller",
                            "required": [],
                            "title": "port"
                        },
                        "type": {
                            "default": "ClusterIP",
                            "description": "Service type",
                            "required": [],
                            "title": "type"
                        }
                    },
                    "required": [],
                    "title": "service",
                    "type": "object"
                },
                "serviceAccount": {
                    "additionalProperties": false,
                    "default": "See below",
                    "description": "Service Account Configuration",
                    "properties": {
                        "annotations": {
                            "additionalProperties": true,
                            "description": "Additional custom annotations for the ServiceAccount.",
                            "required": [],
                            "title": "annotations"
                        },
                        "create": {
                            "default": "true",
                            "description": "Enable the creation of a ServiceAccount for Modelservice pods",
                            "required": [],
                            "title": "create"
                        },
                        "fullnameOverride": {
                            "default": "",
                            "description": "String to fully override modelservice.serviceAccountName, defaults to modelservice.fullname",
                            "required": [],
                            "title": "fullnameOverride"
                        },
                        "labels": {
                            "additionalProperties": true,
                            "description": "Additional custom labels to the service ServiceAccount.",
                            "required": [],
                            "title": "labels"
                        },
                        "nameOverride": {
                            "default": "",
                            "description": "String to partially override modelservice.serviceAccountName, defaults to modelservice.fullname",
                            "required": [],
                            "title": "nameOverride"
                        }
                    },
                    "required": [],
                    "title": "serviceAccount"
                },
                "tolerations": {
                    "description": "Node tolerations for server scheduling to nodes with taints <br /> Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/",
                    "items": {
                        "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
                        "properties": {
                            "effect": {
                                "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                                "type": "string"
                            },
                            "key": {
                                "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                                "type": "string"
                            },
                            "operator": {
                                "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                                "type": "string"
                            },
                            "tolerationSeconds": {
                                "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                                "format": "int64",
                                "type": "integer"
                            },
                            "value": {
                                "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "required": [],
                    "title": "tolerations"
                },
                "topologySpreadConstraints": {
                    "description": "Topology Spread Constraints for pod assignment <br /> Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#pod-topology-spread-constraints",
                    "items": {
                        "description": "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
                        "properties": {
                            "labelSelector": {
                                "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                "properties": {
                                    "matchExpressions": {
                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                        "items": {
                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "properties": {
                                                "key": {
                                                    "description": "key is the label key that the selector applies to.",
                                                    "type": "string"
                                                },
                                                "operator": {
                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                    "type": "string"
                                                },
                                                "values": {
                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "type": "array",
                                                    "x-kubernetes-list-type": "atomic"
                                                }
                                            },
                                            "required": [
                                                "key",
                                                "operator"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array",
                                        "x-kubernetes-list-type": "atomic"
                                    },
                                    "matchLabels": {
                                        "additionalProperties": {
                                            "type": "string"
                                        },
                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                        "type": "object"
                                    }
                                },
                                "type": "object",
                                "x-kubernetes-map-type": "atomic"
                            },
                            "matchLabelKeys": {
                                "description": "MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. MatchLabelKeys cannot be set when LabelSelector isn't set. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.\n\nThis is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "x-kubernetes-list-type": "atomic"
                            },
                            "maxSkew": {
                                "description": "MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.",
                                "format": "int32",
                                "type": "integer"
                            },
                            "minDomains": {
                                "description": "MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats \"global minimum\" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.\n\nFor example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so \"global minimum\" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.",
                                "format": "int32",
                                "type": "integer"
                            },
                            "nodeAffinityPolicy": {
                                "description": "NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.\n\nIf this value is nil, the behavior is equivalent to the Honor policy.",
                                "type": "string"
                            },
                            "nodeTaintsPolicy": {
                                "description": "NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.\n\nIf this value is nil, the behavior is equivalent to the Ignore policy.",
                                "type": "string"
                            },
                            "topologyKey": {
                                "description": "TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a \"bucket\", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is \"kubernetes.io/hostname\", each Node is a domain of that topology. And, if TopologyKey is \"topology.kubernetes.io/zone\", each zone is a domain of that topology. It's a required field.",
                                "type": "string"
                            },
                            "whenUnsatisfiable": {
                                "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,\n  but giving higher precedence to topologies that would help reduce the\n  skew.\nA constraint is considered \"Unsatisfiable\" for an incoming pod if and only if every possible node assignment for that pod would violate \"MaxSkew\" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "maxSkew",
                            "topologyKey",
                            "whenUnsatisfiable"
                        ],
                        "type": "object"
                    },
                    "required": [],
                    "title": "topologySpreadConstraints"
                },
                "vllm": {
                    "additionalProperties": false,
                    "default": "See below",
                    "description": "vLLM container options",
                    "properties": {
                        "image": {
                            "additionalProperties": false,
                            "default": "See below",
                            "description": "vLLM image used in ModelService CR presets",
                            "properties": {
                                "imagePullPolicy": {
                                    "default": "IfNotPresent",
                                    "description": "Specify a imagePullPolicy",
                                    "required": [],
                                    "title": "imagePullPolicy"
                                },
                                "pullSecrets": {
                                    "description": "Optionally specify an array of imagePullSecrets (evaluated as templates)",
                                    "items": {
                                        "required": [],
                                        "type": "string"
                                    },
                                    "required": [],
                                    "title": "pullSecrets"
                                },
                                "registry": {
                                    "default": "ghcr.io",
                                    "description": "llm-d image registry",
                                    "required": [],
                                    "title": "registry"
                                },
                                "repository": {
                                    "default": "llm-d/llm-d",
                                    "description": "llm-d image repository",
                                    "required": [],
                                    "title": "repository"
                                },
                                "tag": {
                                    "default": "0.0.8",
                                    "description": "llm-d image tag",
                                    "required": [],
                                    "title": "tag"
                                }
                            },
                            "required": [],
                            "title": "image"
                        },
                        "logLevel": {
                            "default": "INFO",
                            "description": "Log level to run VLLM with <br /> VLLM supports standard python log-levels, see: https://docs.python.org/3/library/logging.html#logging-levels <br /> Options: \"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\"",
                            "required": [],
                            "title": "logLevel"
                        },
                        "metrics": {
                            "additionalProperties": false,
                            "description": "Enable metrics gathering via podMonitor / ServiceMonitor",
                            "properties": {
                                "enabled": {
                                    "default": "true",
                                    "description": "Enable metrics scraping from prefill & decode services",
                                    "required": [],
                                    "title": "enabled"
                                }
                            },
                            "required": [],
                            "title": "metrics"
                        }
                    },
                    "required": [],
                    "title": "vllm"
                }
            },
            "required": [],
            "title": "modelservice"
        },
        "nameOverride": {
            "default": "",
            "description": "String to partially override common.names.fullname",
            "required": [],
            "title": "nameOverride"
        },
        "redis": {
            "$schema": "http://json-schema.org/schema#",
            "properties": {
                "architecture": {
                    "default": "replication",
                    "description": "Redis&reg; architecture. Allowed values: `standalone` or `replication`",
                    "type": "string"
                },
                "auth": {
                    "properties": {
                        "acl": {
                            "properties": {
                                "enabled": {
                                    "default": false,
                                    "description": "Enables the support of the Redis ACL system",
                                    "type": "boolean"
                                },
                                "users": {
                                    "default": [],
                                    "description": "A list of the configured users in the Redis ACL system",
                                    "items": {},
                                    "type": "array"
                                }
                            },
                            "type": "object"
                        },
                        "enabled": {
                            "default": true,
                            "description": "Enable password authentication",
                            "type": "boolean"
                        },
                        "existingSecret": {
                            "default": "",
                            "description": "The name of an existing secret with Redis&reg; credentials",
                            "type": "string"
                        },
                        "existingSecretPasswordKey": {
                            "default": "",
                            "description": "Password key to be retrieved from existing secret",
                            "type": "string"
                        },
                        "password": {
                            "default": "",
                            "description": "Redis&reg; password",
                            "type": "string"
                        },
                        "sentinel": {
                            "default": true,
                            "description": "Enable password authentication on sentinels too",
                            "type": "boolean"
                        },
                        "usePasswordFileFromSecret": {
                            "default": true,
                            "description": "Mount password file from secret",
                            "type": "boolean"
                        },
                        "usePasswordFiles": {
                            "default": false,
                            "description": "Mount credentials as files instead of using an environment variable",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "clusterDomain": {
                    "default": "cluster.local",
                    "description": "Kubernetes cluster domain name",
                    "type": "string"
                },
                "commonAnnotations": {
                    "default": {},
                    "description": "Annotations to add to all deployed objects",
                    "type": [
                        "object",
                        "string"
                    ]
                },
                "commonConfiguration": {
                    "default": "\"\"",
                    "description": "Common configuration to be added into the ConfigMap",
                    "type": "string"
                },
                "commonLabels": {
                    "default": {},
                    "description": "Labels to add to all deployed objects",
                    "type": [
                        "object",
                        "string"
                    ]
                },
                "diagnosticMode": {
                    "properties": {
                        "args": {
                            "default": [
                                "infinity"
                            ],
                            "description": "Args to override all containers in the deployment",
                            "items": {
                                "type": "string"
                            },
                            "type": [
                                "array",
                                "string"
                            ]
                        },
                        "command": {
                            "default": [
                                "sleep"
                            ],
                            "description": "Command to override all containers in the deployment",
                            "items": {
                                "type": "string"
                            },
                            "type": [
                                "array",
                                "string"
                            ]
                        },
                        "enabled": {
                            "default": false,
                            "description": "Enable diagnostic mode (all probes will be disabled and the command will be overridden)",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "existingConfigmap": {
                    "default": "",
                    "description": "The name of an existing ConfigMap with your custom configuration for Redis&reg; nodes",
                    "type": "string"
                },
                "extraDeploy": {
                    "default": [],
                    "description": "Array of extra objects to deploy with the release",
                    "items": {},
                    "type": "array"
                },
                "fullnameOverride": {
                    "default": "",
                    "description": "String to fully override common.names.fullname",
                    "type": "string"
                },
                "global": {
                    "properties": {
                        "compatibility": {
                            "properties": {
                                "openshift": {
                                    "properties": {
                                        "adaptSecurityContext": {
                                            "default": "auto",
                                            "description": "Adapt the securityContext sections of the deployment to make them compatible with Openshift restricted-v2 SCC: remove runAsUser, runAsGroup and fsGroup and let the platform use their allowed default IDs. Possible values: auto (apply if the detected running cluster is Openshift), force (perform the adaptation always), disabled (do not perform adaptation)",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "defaultStorageClass": {
                            "default": "",
                            "description": "Global default StorageClass for Persistent Volume(s)",
                            "type": "string"
                        },
                        "imagePullSecrets": {
                            "default": [],
                            "description": "Global Docker registry secret names as an array",
                            "items": {},
                            "type": "array"
                        },
                        "imageRegistry": {
                            "default": "",
                            "description": "Global Docker image registry",
                            "type": "string"
                        },
                        "redis": {
                            "properties": {
                                "password": {
                                    "default": "",
                                    "description": "Global Redis&reg; password (overrides `auth.password`)",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "storageClass": {
                            "default": "",
                            "description": "DEPRECATED: use global.defaultStorageClass instead",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "image": {
                    "properties": {
                        "debug": {
                            "default": false,
                            "description": "Enable image debug mode",
                            "type": "boolean"
                        },
                        "digest": {
                            "default": "",
                            "description": "Redis&reg; image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "type": "string"
                        },
                        "pullPolicy": {
                            "default": "IfNotPresent",
                            "description": "Redis&reg; image pull policy",
                            "type": "string"
                        },
                        "pullSecrets": {
                            "default": [],
                            "description": "Redis&reg; image pull secrets",
                            "items": {},
                            "type": "array"
                        },
                        "registry": {
                            "default": "REGISTRY_NAME",
                            "description": "Redis&reg; image registry",
                            "type": "string"
                        },
                        "repository": {
                            "default": "REPOSITORY_NAME/redis",
                            "description": "Redis&reg; image repository",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "kubeVersion": {
                    "default": "",
                    "description": "Override Kubernetes version",
                    "type": "string"
                },
                "kubectl": {
                    "properties": {
                        "command": {
                            "default": [
                                "/opt/bitnami/scripts/kubectl-scripts/update-master-label.sh"
                            ],
                            "description": "kubectl command to execute",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "containerSecurityContext": {
                            "properties": {
                                "allowPrivilegeEscalation": {
                                    "default": false,
                                    "description": "Set kubectl containers' Security Context allowPrivilegeEscalation",
                                    "type": "boolean"
                                },
                                "capabilities": {
                                    "properties": {
                                        "drop": {
                                            "default": [
                                                "ALL"
                                            ],
                                            "description": "Set kubectl containers' Security Context capabilities to drop",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                },
                                "enabled": {
                                    "default": true,
                                    "description": "Enabled kubectl containers' Security Context",
                                    "type": "boolean"
                                },
                                "readOnlyRootFilesystem": {
                                    "default": true,
                                    "description": "Set container's Security Context read-only root filesystem",
                                    "type": "boolean"
                                },
                                "runAsGroup": {
                                    "default": 1001,
                                    "description": "Set kubectl containers' Security Context runAsGroup",
                                    "type": "number"
                                },
                                "runAsNonRoot": {
                                    "default": true,
                                    "description": "Set kubectl containers' Security Context runAsNonRoot",
                                    "type": "boolean"
                                },
                                "runAsUser": {
                                    "default": 1001,
                                    "description": "Set kubectl containers' Security Context runAsUser",
                                    "type": "number"
                                },
                                "seccompProfile": {
                                    "properties": {
                                        "type": {
                                            "default": "RuntimeDefault",
                                            "description": "Set kubectl containers' Security Context seccompProfile",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "image": {
                            "properties": {
                                "digest": {
                                    "default": "",
                                    "description": "Kubectl image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                                    "type": "string"
                                },
                                "pullPolicy": {
                                    "default": "IfNotPresent",
                                    "description": "Kubectl image pull policy",
                                    "type": "string"
                                },
                                "pullSecrets": {
                                    "default": [],
                                    "description": "Kubectl pull secrets",
                                    "items": {},
                                    "type": "array"
                                },
                                "registry": {
                                    "default": "REGISTRY_NAME",
                                    "description": "Kubectl image registry",
                                    "type": "string"
                                },
                                "repository": {
                                    "default": "REPOSITORY_NAME/kubectl",
                                    "description": "Kubectl image repository",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "resources": {
                            "properties": {
                                "limits": {
                                    "default": {},
                                    "description": "The resources limits for the kubectl containers",
                                    "type": "object"
                                },
                                "requests": {
                                    "default": {},
                                    "description": "The requested resources for the kubectl containers",
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "master": {
                    "properties": {
                        "affinity": {
                            "default": {},
                            "description": "Affinity for Redis&reg; master pods assignment",
                            "type": [
                                "object",
                                "string"
                            ]
                        },
                        "args": {
                            "default": [],
                            "description": "Override default container args (useful when using custom images)",
                            "items": {},
                            "type": [
                                "array",
                                "string"
                            ]
                        },
                        "automountServiceAccountToken": {
                            "default": false,
                            "description": "Mount Service Account token in pod",
                            "type": "boolean"
                        },
                        "command": {
                            "default": [],
                            "description": "Override default container command (useful when using custom images)",
                            "items": {},
                            "type": [
                                "array",
                                "string"
                            ]
                        },
                        "configuration": {
                            "default": "",
                            "description": "Configuration for Redis&reg; master nodes",
                            "type": "string"
                        },
                        "containerPorts": {
                            "properties": {
                                "redis": {
                                    "default": 6379,
                                    "description": "Container port to open on Redis&reg; master nodes",
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        "containerSecurityContext": {
                            "properties": {
                                "allowPrivilegeEscalation": {
                                    "default": false,
                                    "description": "Is it possible to escalate Redis&reg; pod(s) privileges",
                                    "type": "boolean"
                                },
                                "capabilities": {
                                    "properties": {
                                        "drop": {
                                            "default": [
                                                "ALL"
                                            ],
                                            "description": "Set Redis&reg; master containers' Security Context capabilities to drop",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                },
                                "enabled": {
                                    "default": true,
                                    "description": "Enabled Redis&reg; master containers' Security Context",
                                    "type": "boolean"
                                },
                                "readOnlyRootFilesystem": {
                                    "default": true,
                                    "description": "Set container's Security Context read-only root filesystem",
                                    "type": "boolean"
                                },
                                "runAsGroup": {
                                    "default": 1001,
                                    "description": "Set Redis&reg; master containers' Security Context runAsGroup",
                                    "type": "number"
                                },
                                "runAsNonRoot": {
                                    "default": true,
                                    "description": "Set Redis&reg; master containers' Security Context runAsNonRoot",
                                    "type": "boolean"
                                },
                                "runAsUser": {
                                    "default": 1001,
                                    "description": "Set Redis&reg; master containers' Security Context runAsUser",
                                    "type": "number"
                                },
                                "seccompProfile": {
                                    "properties": {
                                        "type": {
                                            "default": "RuntimeDefault",
                                            "description": "Set Redis&reg; master containers' Security Context seccompProfile",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "count": {
                            "default": 1,
                            "description": "Number of Redis&reg; master instances to deploy (experimental, requires additional configuration)",
                            "type": "number"
                        },
                        "customLivenessProbe": {
                            "default": {},
                            "description": "Custom livenessProbe that overrides the default one",
                            "type": [
                                "object",
                                "string"
                            ]
                        },
                        "customReadinessProbe": {
                            "default": {},
                            "description": "Custom readinessProbe that overrides the default one",
                            "type": [
                                "object",
                                "string"
                            ]
                        },
                        "customStartupProbe": {
                            "default": {},
                            "description": "Custom startupProbe that overrides the default one",
                            "type": [
                                "object",
                                "string"
                            ]
                        },
                        "disableCommands": {
                            "default": [
                                "FLUSHDB",
                                "FLUSHALL"
                            ],
                            "description": "Array with Redis&reg; commands to disable on master nodes",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "dnsConfig": {
                            "default": {},
                            "description": "DNS Configuration for Redis&reg; master pod",
                            "type": [
                                "object",
                                "string"
                            ]
                        },
                        "dnsPolicy": {
                            "default": "",
                            "description": "DNS Policy for Redis&reg; master pod",
                            "type": "string"
                        },
                        "enableServiceLinks": {
                            "default": true,
                            "description": "Whether information about services should be injected into pod's environment variable",
                            "type": "boolean"
                        },
                        "extraEnvVars": {
                            "default": [],
                            "description": "Array with extra environment variables to add to Redis&reg; master nodes",
                            "items": {},
                            "type": [
                                "array",
                                "string"
                            ]
                        },
                        "extraEnvVarsCM": {
                            "default": "",
                            "description": "Name of existing ConfigMap containing extra env vars for Redis&reg; master nodes",
                            "type": "string"
                        },
                        "extraEnvVarsSecret": {
                            "default": "",
                            "description": "Name of existing Secret containing extra env vars for Redis&reg; master nodes",
                            "type": "string"
                        },
                        "extraFlags": {
                            "default": [],
                            "description": "Array with additional command line flags for Redis&reg; master",
                            "items": {},
                            "type": "array"
                        },
                        "extraVolumeMounts": {
                            "default": [],
                            "description": "Optionally specify extra list of additional volumeMounts for the Redis&reg; master container(s)",
                            "items": {},
                            "type": [
                                "array",
                                "string"
                            ]
                        },
                        "extraVolumes": {
                            "default": [],
                            "description": "Optionally specify extra list of additional volumes for the Redis&reg; master pod(s)",
                            "items": {},
                            "type": [
                                "array",
                                "string"
                            ]
                        },
                        "hostAliases": {
                            "default": [],
                            "description": "Redis&reg; master pods host aliases",
                            "items": {},
                            "type": [
                                "array",
                                "string"
                            ]
                        },
                        "initContainers": {
                            "default": [],
                            "description": "Add additional init containers to the Redis&reg; master pod(s)",
                            "items": {},
                            "type": [
                                "array",
                                "string"
                            ]
                        },
                        "kind": {
                            "default": "StatefulSet",
                            "description": "Use either Deployment, StatefulSet (default) or DaemonSet",
                            "type": "string"
                        },
                        "lifecycleHooks": {
                            "default": {},
                            "description": "for the Redis&reg; master container(s) to automate configuration before or after startup",
                            "type": [
                                "object",
                                "string"
                            ]
                        },
                        "livenessProbe": {
                            "properties": {
                                "enabled": {
                                    "default": true,
                                    "description": "Enable livenessProbe on Redis&reg; master nodes",
                                    "type": "boolean"
                                },
                                "failureThreshold": {
                                    "default": 5,
                                    "description": "Failure threshold for livenessProbe",
                                    "type": "number"
                                },
                                "initialDelaySeconds": {
                                    "default": 20,
                                    "description": "Initial delay seconds for livenessProbe",
                                    "type": "number"
                                },
                                "periodSeconds": {
                                    "default": 5,
                                    "description": "Period seconds for livenessProbe",
                                    "type": "number"
                                },
                                "successThreshold": {
                                    "default": 1,
                                    "description": "Success threshold for livenessProbe",
                                    "type": "number"
                                },
                                "timeoutSeconds": {
                                    "default": 5,
                                    "description": "Timeout seconds for livenessProbe",
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        "minReadySeconds": {
                            "default": 0,
                            "description": "How many seconds a pod needs to be ready before killing the next, during update",
                            "type": "number"
                        },
                        "nodeAffinityPreset": {
                            "properties": {
                                "key": {
                                    "default": "",
                                    "description": "Node label key to match. Ignored if `master.affinity` is set",
                                    "type": "string"
                                },
                                "type": {
                                    "default": "",
                                    "description": "Node affinity preset type. Ignored if `master.affinity` is set. Allowed values: `soft` or `hard`",
                                    "type": "string"
                                },
                                "values": {
                                    "default": [],
                                    "description": "Node label values to match. Ignored if `master.affinity` is set",
                                    "items": {},
                                    "type": "array"
                                }
                            },
                            "type": "object"
                        },
                        "nodeSelector": {
                            "default": {},
                            "description": "Node labels for Redis&reg; master pods assignment",
                            "type": [
                                "object",
                                "string"
                            ]
                        },
                        "pdb": {
                            "properties": {
                                "create": {
                                    "default": true,
                                    "description": "Enable/disable a Pod Disruption Budget creation",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "persistence": {
                            "properties": {
                                "accessModes": {
                                    "default": [
                                        "ReadWriteOnce"
                                    ],
                                    "description": "Persistent Volume access modes",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "annotations": {
                                    "default": {},
                                    "description": "Additional custom annotations for the PVC",
                                    "type": "object"
                                },
                                "dataSource": {
                                    "default": {},
                                    "description": "Custom PVC data source",
                                    "type": [
                                        "object",
                                        "string"
                                    ]
                                },
                                "enabled": {
                                    "default": true,
                                    "description": "Enable persistence on Redis&reg; master nodes using Persistent Volume Claims",
                                    "type": "boolean"
                                },
                                "existingClaim": {
                                    "default": "",
                                    "description": "Use a existing PVC which must be created manually before bound",
                                    "type": "string"
                                },
                                "labels": {
                                    "default": {},
                                    "description": "Additional custom labels for the PVC",
                                    "type": [
                                        "object",
                                        "string"
                                    ]
                                },
                                "medium": {
                                    "default": "",
                                    "description": "Provide a medium for `emptyDir` volumes.",
                                    "type": "string"
                                },
                                "path": {
                                    "default": "/data",
                                    "description": "The path the volume will be mounted at on Redis&reg; master containers",
                                    "type": "string"
                                },
                                "selector": {
                                    "default": {},
                                    "description": "Additional labels to match for the PVC",
                                    "type": [
                                        "object",
                                        "string"
                                    ]
                                },
                                "size": {
                                    "default": "8Gi",
                                    "description": "Persistent Volume size",
                                    "type": "string"
                                },
                                "sizeLimit": {
                                    "default": "",
                                    "description": "Set this to enable a size limit for `emptyDir` volumes.",
                                    "type": "string"
                                },
                                "storageClass": {
                                    "default": "",
                                    "description": "Persistent Volume storage class",
                                    "type": "string"
                                },
                                "subPath": {
                                    "default": "",
                                    "description": "The subdirectory of the volume to mount on Redis&reg; master containers",
                                    "type": "string"
                                },
                                "subPathExpr": {
                                    "default": "",
                                    "description": "Used to construct the subPath subdirectory of the volume to mount on Redis&reg; master containers",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "persistentVolumeClaimRetentionPolicy": {
                            "properties": {
                                "enabled": {
                                    "default": false,
                                    "description": "Controls if and how PVCs are deleted during the lifecycle of a StatefulSet",
                                    "type": "boolean"
                                },
                                "whenDeleted": {
                                    "default": "Retain",
                                    "description": "Volume retention behavior that applies when the StatefulSet is deleted",
                                    "type": "string"
                                },
                                "whenScaled": {
                                    "default": "Retain",
                                    "description": "Volume retention behavior when the replica count of the StatefulSet is reduced",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "podAffinityPreset": {
                            "default": "",
                            "description": "Pod affinity preset. Ignored if `master.affinity` is set. Allowed values: `soft` or `hard`",
                            "type": "string"
                        },
                        "podAnnotations": {
                            "default": {},
                            "description": "Annotations for Redis&reg; master pods",
                            "type": [
                                "object",
                                "string"
                            ]
                        },
                        "podAntiAffinityPreset": {
                            "default": "soft",
                            "description": "Pod anti-affinity preset. Ignored if `master.affinity` is set. Allowed values: `soft` or `hard`",
                            "type": "string"
                        },
                        "podLabels": {
                            "default": {},
                            "description": "Extra labels for Redis&reg; master pods",
                            "type": "object"
                        },
                        "podSecurityContext": {
                            "properties": {
                                "enabled": {
                                    "default": true,
                                    "description": "Enabled Redis&reg; master pods' Security Context",
                                    "type": "boolean"
                                },
                                "fsGroup": {
                                    "default": 1001,
                                    "description": "Set Redis&reg; master pod's Security Context fsGroup",
                                    "type": "number"
                                },
                                "fsGroupChangePolicy": {
                                    "default": "Always",
                                    "description": "Set filesystem group change policy",
                                    "type": "string"
                                },
                                "supplementalGroups": {
                                    "default": [],
                                    "description": "Set filesystem extra groups",
                                    "items": {},
                                    "type": "array"
                                },
                                "sysctls": {
                                    "default": [],
                                    "description": "Set kernel settings using the sysctl interface",
                                    "items": {},
                                    "type": "array"
                                }
                            },
                            "type": "object"
                        },
                        "preExecCmds": {
                            "default": [],
                            "description": "Additional commands to run prior to starting Redis&reg; master",
                            "items": {},
                            "type": "array"
                        },
                        "priorityClassName": {
                            "default": "",
                            "description": "Redis&reg; master pods' priorityClassName",
                            "type": "string"
                        },
                        "readinessProbe": {
                            "properties": {
                                "enabled": {
                                    "default": true,
                                    "description": "Enable readinessProbe on Redis&reg; master nodes",
                                    "type": "boolean"
                                },
                                "failureThreshold": {
                                    "default": 5,
                                    "description": "Failure threshold for readinessProbe",
                                    "type": "number"
                                },
                                "initialDelaySeconds": {
                                    "default": 20,
                                    "description": "Initial delay seconds for readinessProbe",
                                    "type": "number"
                                },
                                "periodSeconds": {
                                    "default": 5,
                                    "description": "Period seconds for readinessProbe",
                                    "type": "number"
                                },
                                "successThreshold": {
                                    "default": 1,
                                    "description": "Success threshold for readinessProbe",
                                    "type": "number"
                                },
                                "timeoutSeconds": {
                                    "default": 1,
                                    "description": "Timeout seconds for readinessProbe",
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        "resources": {
                            "default": {},
                            "description": "Set container requests and limits for different resources like CPU or memory (essential for production workloads)",
                            "type": "object"
                        },
                        "resourcesPreset": {
                            "default": "nano",
                            "description": "Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if master.resources is set (master.resources is recommended for production).",
                            "type": "string"
                        },
                        "revisionHistoryLimit": {
                            "default": 10,
                            "description": "The number of old history to retain to allow rollback",
                            "type": "number"
                        },
                        "schedulerName": {
                            "default": "",
                            "description": "Alternate scheduler for Redis&reg; master pods",
                            "type": "string"
                        },
                        "service": {
                            "properties": {
                                "annotations": {
                                    "default": {},
                                    "description": "Additional custom annotations for Redis&reg; master service",
                                    "type": [
                                        "object",
                                        "string"
                                    ]
                                },
                                "clusterIP": {
                                    "default": "",
                                    "description": "Redis&reg; master service Cluster IP",
                                    "type": "string"
                                },
                                "externalIPs": {
                                    "default": [],
                                    "description": "Redis&reg; master service External IPs",
                                    "items": {},
                                    "type": [
                                        "array",
                                        "string"
                                    ]
                                },
                                "externalTrafficPolicy": {
                                    "default": "Cluster",
                                    "description": "Redis&reg; master service external traffic policy",
                                    "type": "string"
                                },
                                "extraPorts": {
                                    "default": [],
                                    "description": "Extra ports to expose (normally used with the `sidecar` value)",
                                    "items": {},
                                    "type": [
                                        "array",
                                        "string"
                                    ]
                                },
                                "internalTrafficPolicy": {
                                    "default": "Cluster",
                                    "description": "Redis&reg; master service internal traffic policy (requires Kubernetes v1.22 or greater to be usable)",
                                    "type": "string"
                                },
                                "loadBalancerClass": {
                                    "default": "",
                                    "description": "master service Load Balancer class if service type is `LoadBalancer` (optional, cloud specific)",
                                    "type": "string"
                                },
                                "loadBalancerIP": {
                                    "default": "",
                                    "description": "Redis&reg; master service Load Balancer IP",
                                    "type": "string"
                                },
                                "loadBalancerSourceRanges": {
                                    "default": [],
                                    "description": "Redis&reg; master service Load Balancer sources",
                                    "items": {},
                                    "type": "array"
                                },
                                "nodePorts": {
                                    "properties": {
                                        "redis": {
                                            "default": "",
                                            "description": "Node port for Redis&reg; master",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "portNames": {
                                    "properties": {
                                        "redis": {
                                            "default": "tcp-redis",
                                            "description": "Redis&reg; master service port name",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "ports": {
                                    "properties": {
                                        "redis": {
                                            "default": 6379,
                                            "description": "Redis&reg; master service port",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "sessionAffinity": {
                                    "default": "None",
                                    "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                                    "type": "string"
                                },
                                "sessionAffinityConfig": {
                                    "default": {},
                                    "description": "Additional settings for the sessionAffinity",
                                    "type": [
                                        "object",
                                        "string"
                                    ]
                                },
                                "type": {
                                    "default": "ClusterIP",
                                    "description": "Redis&reg; master service type",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "serviceAccount": {
                            "properties": {
                                "annotations": {
                                    "default": {},
                                    "description": "Additional custom annotations for the ServiceAccount",
                                    "type": [
                                        "object",
                                        "string"
                                    ]
                                },
                                "automountServiceAccountToken": {
                                    "default": false,
                                    "description": "Whether to auto mount the service account token",
                                    "type": "boolean"
                                },
                                "create": {
                                    "default": true,
                                    "description": "Specifies whether a ServiceAccount should be created",
                                    "type": "boolean"
                                },
                                "name": {
                                    "default": "",
                                    "description": "The name of the ServiceAccount to use.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "shareProcessNamespace": {
                            "default": false,
                            "description": "Share a single process namespace between all of the containers in Redis&reg; master pods",
                            "type": "boolean"
                        },
                        "sidecars": {
                            "default": [],
                            "description": "Add additional sidecar containers to the Redis&reg; master pod(s)",
                            "items": {},
                            "type": [
                                "array",
                                "string"
                            ]
                        },
                        "startupProbe": {
                            "properties": {
                                "enabled": {
                                    "default": false,
                                    "description": "Enable startupProbe on Redis&reg; master nodes",
                                    "type": "boolean"
                                },
                                "failureThreshold": {
                                    "default": 5,
                                    "description": "Failure threshold for startupProbe",
                                    "type": "number"
                                },
                                "initialDelaySeconds": {
                                    "default": 20,
                                    "description": "Initial delay seconds for startupProbe",
                                    "type": "number"
                                },
                                "periodSeconds": {
                                    "default": 5,
                                    "description": "Period seconds for startupProbe",
                                    "type": "number"
                                },
                                "successThreshold": {
                                    "default": 1,
                                    "description": "Success threshold for startupProbe",
                                    "type": "number"
                                },
                                "timeoutSeconds": {
                                    "default": 5,
                                    "description": "Timeout seconds for startupProbe",
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        "terminationGracePeriodSeconds": {
                            "default": 30,
                            "description": "Integer setting the termination grace period for the redis-master pods",
                            "type": "number"
                        },
                        "tolerations": {
                            "default": [],
                            "description": "Tolerations for Redis&reg; master pods assignment",
                            "items": {},
                            "type": [
                                "array",
                                "string"
                            ]
                        },
                        "topologySpreadConstraints": {
                            "default": [],
                            "description": "Spread Constraints for Redis&reg; master pod assignment",
                            "items": {},
                            "type": [
                                "array",
                                "string"
                            ]
                        },
                        "updateStrategy": {
                            "properties": {
                                "type": {
                                    "default": "RollingUpdate",
                                    "description": "Redis&reg; master statefulset strategy type",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "metrics": {
                    "properties": {
                        "command": {
                            "default": [],
                            "description": "Override default metrics container init command (useful when using custom images)",
                            "items": {},
                            "type": [
                                "array",
                                "string"
                            ]
                        },
                        "containerPorts": {
                            "properties": {
                                "http": {
                                    "default": 9121,
                                    "description": "Metrics HTTP container port",
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        "containerSecurityContext": {
                            "properties": {
                                "allowPrivilegeEscalation": {
                                    "default": false,
                                    "description": "Set Redis&reg; exporter containers' Security Context allowPrivilegeEscalation",
                                    "type": "boolean"
                                },
                                "capabilities": {
                                    "properties": {
                                        "drop": {
                                            "default": [
                                                "ALL"
                                            ],
                                            "description": "Set Redis&reg; exporter containers' Security Context capabilities to drop",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                },
                                "enabled": {
                                    "default": true,
                                    "description": "Enabled Redis&reg; exporter containers' Security Context",
                                    "type": "boolean"
                                },
                                "readOnlyRootFilesystem": {
                                    "default": true,
                                    "description": "Set container's Security Context read-only root filesystem",
                                    "type": "boolean"
                                },
                                "runAsGroup": {
                                    "default": 1001,
                                    "description": "Set Redis&reg; exporter containers' Security Context runAsGroup",
                                    "type": "number"
                                },
                                "runAsNonRoot": {
                                    "default": true,
                                    "description": "Set Redis&reg; exporter containers' Security Context runAsNonRoot",
                                    "type": "boolean"
                                },
                                "runAsUser": {
                                    "default": 1001,
                                    "description": "Set Redis&reg; exporter containers' Security Context runAsUser",
                                    "type": "number"
                                },
                                "seccompProfile": {
                                    "properties": {
                                        "type": {
                                            "default": "RuntimeDefault",
                                            "description": "Set Redis&reg; exporter containers' Security Context seccompProfile",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "customLivenessProbe": {
                            "default": {},
                            "description": "Custom livenessProbe that overrides the default one",
                            "type": [
                                "object",
                                "string"
                            ]
                        },
                        "customReadinessProbe": {
                            "default": {},
                            "description": "Custom readinessProbe that overrides the default one",
                            "type": [
                                "object",
                                "string"
                            ]
                        },
                        "customStartupProbe": {
                            "default": {},
                            "description": "Custom startupProbe that overrides the default one",
                            "type": [
                                "object",
                                "string"
                            ]
                        },
                        "enabled": {
                            "default": false,
                            "description": "Start a sidecar prometheus exporter to expose Redis&reg; metrics",
                            "type": "boolean"
                        },
                        "extraArgs": {
                            "default": {},
                            "description": "Extra arguments for Redis&reg; exporter, for example:",
                            "type": "object"
                        },
                        "extraEnvVars": {
                            "default": [],
                            "description": "Array with extra environment variables to add to Redis&reg; exporter",
                            "items": {},
                            "type": [
                                "array",
                                "string"
                            ]
                        },
                        "extraVolumeMounts": {
                            "default": [],
                            "description": "Optionally specify extra list of additional volumeMounts for the Redis&reg; metrics sidecar",
                            "items": {},
                            "type": [
                                "array",
                                "string"
                            ]
                        },
                        "extraVolumes": {
                            "default": [],
                            "description": "Optionally specify extra list of additional volumes for the Redis&reg; metrics sidecar",
                            "items": {},
                            "type": [
                                "array",
                                "string"
                            ]
                        },
                        "image": {
                            "properties": {
                                "digest": {
                                    "default": "",
                                    "description": "Redis&reg; Exporter image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                                    "type": "string"
                                },
                                "pullPolicy": {
                                    "default": "IfNotPresent",
                                    "description": "Redis&reg; Exporter image pull policy",
                                    "type": "string"
                                },
                                "pullSecrets": {
                                    "default": [],
                                    "description": "Redis&reg; Exporter image pull secrets",
                                    "items": {},
                                    "type": "array"
                                },
                                "registry": {
                                    "default": "REGISTRY_NAME",
                                    "description": "Redis&reg; Exporter image registry",
                                    "type": "string"
                                },
                                "repository": {
                                    "default": "REPOSITORY_NAME/redis-exporter",
                                    "description": "Redis&reg; Exporter image repository",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "livenessProbe": {
                            "properties": {
                                "enabled": {
                                    "default": true,
                                    "description": "Enable livenessProbe on Redis&reg; replicas nodes",
                                    "type": "boolean"
                                },
                                "failureThreshold": {
                                    "default": 5,
                                    "description": "Failure threshold for livenessProbe",
                                    "type": "number"
                                },
                                "initialDelaySeconds": {
                                    "default": 10,
                                    "description": "Initial delay seconds for livenessProbe",
                                    "type": "number"
                                },
                                "periodSeconds": {
                                    "default": 10,
                                    "description": "Period seconds for livenessProbe",
                                    "type": "number"
                                },
                                "successThreshold": {
                                    "default": 1,
                                    "description": "Success threshold for livenessProbe",
                                    "type": "number"
                                },
                                "timeoutSeconds": {
                                    "default": 5,
                                    "description": "Timeout seconds for livenessProbe",
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        "podLabels": {
                            "default": {},
                            "description": "Extra labels for Redis&reg; exporter pods",
                            "type": "object"
                        },
                        "podMonitor": {
                            "properties": {
                                "additionalEndpoints": {
                                    "default": [],
                                    "description": "Additional endpoints to scrape (e.g sentinel)",
                                    "items": {},
                                    "type": "array"
                                },
                                "additionalLabels": {
                                    "default": {},
                                    "description": "Additional labels that can be used so PodMonitor resource(s) can be discovered by Prometheus",
                                    "type": [
                                        "object",
                                        "string"
                                    ]
                                },
                                "enabled": {
                                    "default": false,
                                    "description": "Create PodMonitor resource(s) for scraping metrics using PrometheusOperator",
                                    "type": "boolean"
                                },
                                "honorLabels": {
                                    "default": false,
                                    "description": "Specify honorLabels parameter to add the scrape endpoint",
                                    "type": "boolean"
                                },
                                "interval": {
                                    "default": "30s",
                                    "description": "The interval at which metrics should be scraped",
                                    "type": "string"
                                },
                                "metricRelabelings": {
                                    "default": [],
                                    "description": "Metrics RelabelConfigs to apply to samples before ingestion.",
                                    "items": {},
                                    "type": "array"
                                },
                                "namespace": {
                                    "default": "",
                                    "description": "The namespace in which the PodMonitor will be created",
                                    "type": "string"
                                },
                                "podTargetLabels": {
                                    "default": [],
                                    "description": "Labels from the Kubernetes pod to be transferred to the created metrics",
                                    "items": {},
                                    "type": "array"
                                },
                                "port": {
                                    "default": "metrics",
                                    "description": "the pod port to scrape metrics from",
                                    "type": "string"
                                },
                                "relabelings": {
                                    "default": [],
                                    "description": "Metrics RelabelConfigs to apply to samples before scraping.",
                                    "items": {},
                                    "type": "array"
                                },
                                "sampleLimit": {
                                    "default": false,
                                    "description": "Limit of how many samples should be scraped from every Pod",
                                    "type": "boolean"
                                },
                                "scrapeTimeout": {
                                    "default": "",
                                    "description": "The timeout after which the scrape is ended",
                                    "type": "string"
                                },
                                "targetLimit": {
                                    "default": false,
                                    "description": "Limit of how many targets should be scraped",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "prometheusRule": {
                            "properties": {
                                "additionalLabels": {
                                    "default": {},
                                    "description": "Additional labels for the prometheusRule",
                                    "type": [
                                        "object",
                                        "string"
                                    ]
                                },
                                "enabled": {
                                    "default": false,
                                    "description": "Create a custom prometheusRule Resource for scraping metrics using PrometheusOperator",
                                    "type": "boolean"
                                },
                                "namespace": {
                                    "default": "",
                                    "description": "The namespace in which the prometheusRule will be created",
                                    "type": "string"
                                },
                                "rules": {
                                    "default": [],
                                    "description": "Custom Prometheus rules",
                                    "items": {},
                                    "type": [
                                        "array",
                                        "string"
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        "readinessProbe": {
                            "properties": {
                                "enabled": {
                                    "default": true,
                                    "description": "Enable readinessProbe on Redis&reg; replicas nodes",
                                    "type": "boolean"
                                },
                                "failureThreshold": {
                                    "default": 3,
                                    "description": "Failure threshold for readinessProbe",
                                    "type": "number"
                                },
                                "initialDelaySeconds": {
                                    "default": 5,
                                    "description": "Initial delay seconds for readinessProbe",
                                    "type": "number"
                                },
                                "periodSeconds": {
                                    "default": 10,
                                    "description": "Period seconds for readinessProbe",
                                    "type": "number"
                                },
                                "successThreshold": {
                                    "default": 1,
                                    "description": "Success threshold for readinessProbe",
                                    "type": "number"
                                },
                                "timeoutSeconds": {
                                    "default": 1,
                                    "description": "Timeout seconds for readinessProbe",
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        "redisTargetHost": {
                            "default": "localhost",
                            "description": "A way to specify an alternative Redis&reg; hostname",
                            "type": "string"
                        },
                        "resources": {
                            "default": {},
                            "description": "Set container requests and limits for different resources like CPU or memory (essential for production workloads)",
                            "type": "object"
                        },
                        "resourcesPreset": {
                            "default": "nano",
                            "description": "Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if metrics.resources is set (metrics.resources is recommended for production).",
                            "type": "string"
                        },
                        "service": {
                            "properties": {
                                "annotations": {
                                    "default": {},
                                    "description": "Additional custom annotations for Redis&reg; exporter service",
                                    "type": [
                                        "object",
                                        "string"
                                    ]
                                },
                                "clusterIP": {
                                    "default": "",
                                    "description": "Redis&reg; exporter service Cluster IP",
                                    "type": "string"
                                },
                                "enabled": {
                                    "default": true,
                                    "description": "Create Service resource(s) for scraping metrics using PrometheusOperator ServiceMonitor, can be disabled when using a PodMonitor",
                                    "type": "boolean"
                                },
                                "externalTrafficPolicy": {
                                    "default": "Cluster",
                                    "description": "Redis&reg; exporter service external traffic policy",
                                    "type": "string"
                                },
                                "extraPorts": {
                                    "default": [],
                                    "description": "Extra ports to expose (normally used with the `sidecar` value)",
                                    "items": {},
                                    "type": [
                                        "array",
                                        "string"
                                    ]
                                },
                                "loadBalancerClass": {
                                    "default": "",
                                    "description": "exporter service Load Balancer class if service type is `LoadBalancer` (optional, cloud specific)",
                                    "type": "string"
                                },
                                "loadBalancerIP": {
                                    "default": "",
                                    "description": "Redis&reg; exporter service Load Balancer IP",
                                    "type": "string"
                                },
                                "loadBalancerSourceRanges": {
                                    "default": [],
                                    "description": "Redis&reg; exporter service Load Balancer sources",
                                    "items": {},
                                    "type": "array"
                                },
                                "ports": {
                                    "properties": {
                                        "http": {
                                            "default": 9121,
                                            "description": "Redis&reg; exporter service port",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": {
                                    "default": "ClusterIP",
                                    "description": "Redis&reg; exporter service type",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "serviceMonitor": {
                            "properties": {
                                "additionalEndpoints": {
                                    "default": [],
                                    "description": "Additional endpoints to scrape (e.g sentinel)",
                                    "items": {},
                                    "type": "array"
                                },
                                "additionalLabels": {
                                    "default": {},
                                    "description": "Additional labels that can be used so ServiceMonitor resource(s) can be discovered by Prometheus",
                                    "type": [
                                        "object",
                                        "string"
                                    ]
                                },
                                "enabled": {
                                    "default": false,
                                    "description": "Create ServiceMonitor resource(s) for scraping metrics using PrometheusOperator",
                                    "type": "boolean"
                                },
                                "honorLabels": {
                                    "default": false,
                                    "description": "Specify honorLabels parameter to add the scrape endpoint",
                                    "type": "boolean"
                                },
                                "interval": {
                                    "default": "30s",
                                    "description": "The interval at which metrics should be scraped",
                                    "type": "string"
                                },
                                "metricRelabelings": {
                                    "default": [],
                                    "description": "Metrics RelabelConfigs to apply to samples before ingestion.",
                                    "items": {},
                                    "type": "array"
                                },
                                "namespace": {
                                    "default": "",
                                    "description": "The namespace in which the ServiceMonitor will be created",
                                    "type": "string"
                                },
                                "podTargetLabels": {
                                    "default": [],
                                    "description": "Labels from the Kubernetes pod to be transferred to the created metrics",
                                    "items": {},
                                    "type": "array"
                                },
                                "port": {
                                    "default": "http-metrics",
                                    "description": "the service port to scrape metrics from",
                                    "type": "string"
                                },
                                "relabelings": {
                                    "default": [],
                                    "description": "Metrics RelabelConfigs to apply to samples before scraping.",
                                    "items": {},
                                    "type": "array"
                                },
                                "sampleLimit": {
                                    "default": false,
                                    "description": "Limit of how many samples should be scraped from every Pod",
                                    "type": "boolean"
                                },
                                "scrapeTimeout": {
                                    "default": "",
                                    "description": "The timeout after which the scrape is ended",
                                    "type": "string"
                                },
                                "targetLimit": {
                                    "default": false,
                                    "description": "Limit of how many targets should be scraped",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "startupProbe": {
                            "properties": {
                                "enabled": {
                                    "default": false,
                                    "description": "Enable startupProbe on Redis&reg; replicas nodes",
                                    "type": "boolean"
                                },
                                "failureThreshold": {
                                    "default": 5,
                                    "description": "Failure threshold for startupProbe",
                                    "type": "number"
                                },
                                "initialDelaySeconds": {
                                    "default": 10,
                                    "description": "Initial delay seconds for startupProbe",
                                    "type": "number"
                                },
                                "periodSeconds": {
                                    "default": 10,
                                    "description": "Period seconds for startupProbe",
                                    "type": "number"
                                },
                                "successThreshold": {
                                    "default": 1,
                                    "description": "Success threshold for startupProbe",
                                    "type": "number"
                                },
                                "timeoutSeconds": {
                                    "default": 5,
                                    "description": "Timeout seconds for startupProbe",
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "nameOverride": {
                    "default": "",
                    "description": "String to partially override common.names.fullname",
                    "type": "string"
                },
                "nameResolutionThreshold": {
                    "default": 5,
                    "description": "Failure threshold for internal hostnames resolution",
                    "type": "number"
                },
                "nameResolutionTimeout": {
                    "default": 5,
                    "description": "Timeout seconds between probes for internal hostnames resolution",
                    "type": "number"
                },
                "namespaceOverride": {
                    "default": "",
                    "description": "String to fully override common.names.namespace",
                    "type": "string"
                },
                "networkPolicy": {
                    "properties": {
                        "allowExternal": {
                            "default": true,
                            "description": "Don't require client label for connections",
                            "type": "boolean"
                        },
                        "allowExternalEgress": {
                            "default": true,
                            "description": "Allow the pod to access any range of port and all destinations.",
                            "type": "boolean"
                        },
                        "enabled": {
                            "default": true,
                            "description": "Enable creation of NetworkPolicy resources",
                            "type": "boolean"
                        },
                        "extraEgress": {
                            "default": [],
                            "description": "Add extra egress rules to the NetworkPolicy",
                            "items": {},
                            "type": [
                                "array",
                                "string"
                            ]
                        },
                        "extraIngress": {
                            "default": [],
                            "description": "Add extra ingress rules to the NetworkPolicy",
                            "items": {},
                            "type": [
                                "array",
                                "string"
                            ]
                        },
                        "ingressNSMatchLabels": {
                            "default": {},
                            "description": "Labels to match to allow traffic from other namespaces",
                            "type": "object"
                        },
                        "ingressNSPodMatchLabels": {
                            "default": {},
                            "description": "Pod labels to match to allow traffic from other namespaces",
                            "type": "object"
                        },
                        "metrics": {
                            "properties": {
                                "allowExternal": {
                                    "default": true,
                                    "description": "Don't require client label for connections for metrics endpoint",
                                    "type": "boolean"
                                },
                                "ingressNSMatchLabels": {
                                    "default": {},
                                    "description": "Labels to match to allow traffic from other namespaces to metrics endpoint",
                                    "type": "object"
                                },
                                "ingressNSPodMatchLabels": {
                                    "default": {},
                                    "description": "Pod labels to match to allow traffic from other namespaces to metrics endpoint",
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "pdb": {
                    "default": {},
                    "description": "DEPRECATED Please use `master.pdb` and `replica.pdb` values instead",
                    "type": "object"
                },
                "podSecurityPolicy": {
                    "properties": {
                        "create": {
                            "default": false,
                            "description": "Whether to create a PodSecurityPolicy. WARNING: PodSecurityPolicy is deprecated in Kubernetes v1.21 or later, unavailable in v1.25 or later",
                            "type": "boolean"
                        },
                        "enabled": {
                            "default": false,
                            "description": "Enable PodSecurityPolicy's RBAC rules",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "rbac": {
                    "properties": {
                        "create": {
                            "default": false,
                            "description": "Specifies whether RBAC resources should be created",
                            "type": "boolean"
                        },
                        "rules": {
                            "default": [],
                            "description": "Custom RBAC rules to set",
                            "items": {},
                            "type": [
                                "array",
                                "string"
                            ]
                        }
                    },
                    "type": "object"
                },
                "replica": {
                    "properties": {
                        "affinity": {
                            "default": {},
                            "description": "Affinity for Redis&reg; replicas pods assignment",
                            "type": [
                                "object",
                                "string"
                            ]
                        },
                        "args": {
                            "default": [],
                            "description": "Override default container args (useful when using custom images)",
                            "items": {},
                            "type": [
                                "array",
                                "string"
                            ]
                        },
                        "automountServiceAccountToken": {
                            "default": false,
                            "description": "Mount Service Account token in pod",
                            "type": "boolean"
                        },
                        "autoscaling": {
                            "properties": {
                                "enabled": {
                                    "default": false,
                                    "description": "Enable replica autoscaling settings",
                                    "type": "boolean"
                                },
                                "maxReplicas": {
                                    "default": 11,
                                    "description": "Maximum replicas for the pod autoscaling",
                                    "type": "number"
                                },
                                "minReplicas": {
                                    "default": 1,
                                    "description": "Minimum replicas for the pod autoscaling",
                                    "type": "number"
                                },
                                "targetCPU": {
                                    "default": "",
                                    "description": "Percentage of CPU to consider when autoscaling",
                                    "type": "string"
                                },
                                "targetMemory": {
                                    "default": "",
                                    "description": "Percentage of Memory to consider when autoscaling",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "command": {
                            "default": [],
                            "description": "Override default container command (useful when using custom images)",
                            "items": {},
                            "type": [
                                "array",
                                "string"
                            ]
                        },
                        "configuration": {
                            "default": "",
                            "description": "Configuration for Redis&reg; replicas nodes",
                            "type": "string"
                        },
                        "containerPorts": {
                            "properties": {
                                "redis": {
                                    "default": 6379,
                                    "description": "Container port to open on Redis&reg; replicas nodes",
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        "containerSecurityContext": {
                            "properties": {
                                "allowPrivilegeEscalation": {
                                    "default": false,
                                    "description": "Set Redis&reg; replicas pod's Security Context allowPrivilegeEscalation",
                                    "type": "boolean"
                                },
                                "capabilities": {
                                    "properties": {
                                        "drop": {
                                            "default": [
                                                "ALL"
                                            ],
                                            "description": "Set Redis&reg; replicas containers' Security Context capabilities to drop",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                },
                                "enabled": {
                                    "default": true,
                                    "description": "Enabled Redis&reg; replicas containers' Security Context",
                                    "type": "boolean"
                                },
                                "readOnlyRootFilesystem": {
                                    "default": true,
                                    "description": "Set container's Security Context read-only root filesystem",
                                    "type": "boolean"
                                },
                                "runAsGroup": {
                                    "default": 1001,
                                    "description": "Set Redis&reg; replicas containers' Security Context runAsGroup",
                                    "type": "number"
                                },
                                "runAsNonRoot": {
                                    "default": true,
                                    "description": "Set Redis&reg; replicas containers' Security Context runAsNonRoot",
                                    "type": "boolean"
                                },
                                "runAsUser": {
                                    "default": 1001,
                                    "description": "Set Redis&reg; replicas containers' Security Context runAsUser",
                                    "type": "number"
                                },
                                "seccompProfile": {
                                    "properties": {
                                        "type": {
                                            "default": "RuntimeDefault",
                                            "description": "Set Redis&reg; replicas containers' Security Context seccompProfile",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "customLivenessProbe": {
                            "default": {},
                            "description": "Custom livenessProbe that overrides the default one",
                            "type": [
                                "object",
                                "string"
                            ]
                        },
                        "customReadinessProbe": {
                            "default": {},
                            "description": "Custom readinessProbe that overrides the default one",
                            "type": [
                                "object",
                                "string"
                            ]
                        },
                        "customStartupProbe": {
                            "default": {},
                            "description": "Custom startupProbe that overrides the default one",
                            "type": [
                                "object",
                                "string"
                            ]
                        },
                        "disableCommands": {
                            "default": [
                                "FLUSHDB",
                                "FLUSHALL"
                            ],
                            "description": "Array with Redis&reg; commands to disable on replicas nodes",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "dnsConfig": {
                            "default": {},
                            "description": "DNS Configuration for Redis&reg; replica pods",
                            "type": [
                                "object",
                                "string"
                            ]
                        },
                        "dnsPolicy": {
                            "default": "",
                            "description": "DNS Policy for Redis&reg; replica pods",
                            "type": "string"
                        },
                        "enableServiceLinks": {
                            "default": true,
                            "description": "Whether information about services should be injected into pod's environment variable",
                            "type": "boolean"
                        },
                        "externalMaster": {
                            "properties": {
                                "enabled": {
                                    "default": false,
                                    "description": "Use external master for bootstrapping",
                                    "type": "boolean"
                                },
                                "host": {
                                    "default": "",
                                    "description": "External master host to bootstrap from",
                                    "type": "string"
                                },
                                "port": {
                                    "default": 6379,
                                    "description": "Port for Redis service external master host",
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        "extraEnvVars": {
                            "default": [],
                            "description": "Array with extra environment variables to add to Redis&reg; replicas nodes",
                            "items": {},
                            "type": [
                                "array",
                                "string"
                            ]
                        },
                        "extraEnvVarsCM": {
                            "default": "",
                            "description": "Name of existing ConfigMap containing extra env vars for Redis&reg; replicas nodes",
                            "type": "string"
                        },
                        "extraEnvVarsSecret": {
                            "default": "",
                            "description": "Name of existing Secret containing extra env vars for Redis&reg; replicas nodes",
                            "type": "string"
                        },
                        "extraFlags": {
                            "default": [],
                            "description": "Array with additional command line flags for Redis&reg; replicas",
                            "items": {},
                            "type": "array"
                        },
                        "extraVolumeMounts": {
                            "default": [],
                            "description": "Optionally specify extra list of additional volumeMounts for the Redis&reg; replicas container(s)",
                            "items": {},
                            "type": [
                                "array",
                                "string"
                            ]
                        },
                        "extraVolumes": {
                            "default": [],
                            "description": "Optionally specify extra list of additional volumes for the Redis&reg; replicas pod(s)",
                            "items": {},
                            "type": [
                                "array",
                                "string"
                            ]
                        },
                        "hostAliases": {
                            "default": [],
                            "description": "Redis&reg; replicas pods host aliases",
                            "items": {},
                            "type": [
                                "array",
                                "string"
                            ]
                        },
                        "initContainers": {
                            "default": [],
                            "description": "Add additional init containers to the Redis&reg; replicas pod(s)",
                            "items": {},
                            "type": [
                                "array",
                                "string"
                            ]
                        },
                        "kind": {
                            "default": "StatefulSet",
                            "description": "Use either DaemonSet or StatefulSet (default)",
                            "type": "string"
                        },
                        "lifecycleHooks": {
                            "default": {},
                            "description": "for the Redis&reg; replica container(s) to automate configuration before or after startup",
                            "type": [
                                "object",
                                "string"
                            ]
                        },
                        "livenessProbe": {
                            "properties": {
                                "enabled": {
                                    "default": true,
                                    "description": "Enable livenessProbe on Redis&reg; replicas nodes",
                                    "type": "boolean"
                                },
                                "failureThreshold": {
                                    "default": 5,
                                    "description": "Failure threshold for livenessProbe",
                                    "type": "number"
                                },
                                "initialDelaySeconds": {
                                    "default": 20,
                                    "description": "Initial delay seconds for livenessProbe",
                                    "type": "number"
                                },
                                "periodSeconds": {
                                    "default": 5,
                                    "description": "Period seconds for livenessProbe",
                                    "type": "number"
                                },
                                "successThreshold": {
                                    "default": 1,
                                    "description": "Success threshold for livenessProbe",
                                    "type": "number"
                                },
                                "timeoutSeconds": {
                                    "default": 5,
                                    "description": "Timeout seconds for livenessProbe",
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        "minReadySeconds": {
                            "default": 0,
                            "description": "How many seconds a pod needs to be ready before killing the next, during update",
                            "type": "number"
                        },
                        "nodeAffinityPreset": {
                            "properties": {
                                "key": {
                                    "default": "",
                                    "description": "Node label key to match. Ignored if `replica.affinity` is set",
                                    "type": "string"
                                },
                                "type": {
                                    "default": "",
                                    "description": "Node affinity preset type. Ignored if `replica.affinity` is set. Allowed values: `soft` or `hard`",
                                    "type": "string"
                                },
                                "values": {
                                    "default": [],
                                    "description": "Node label values to match. Ignored if `replica.affinity` is set",
                                    "items": {},
                                    "type": "array"
                                }
                            },
                            "type": "object"
                        },
                        "nodeSelector": {
                            "default": {},
                            "description": "Node labels for Redis&reg; replicas pods assignment",
                            "type": [
                                "object",
                                "string"
                            ]
                        },
                        "pdb": {
                            "properties": {
                                "create": {
                                    "default": true,
                                    "description": "Enable/disable a Pod Disruption Budget creation",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "persistence": {
                            "properties": {
                                "accessModes": {
                                    "default": [
                                        "ReadWriteOnce"
                                    ],
                                    "description": "Persistent Volume access modes",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "annotations": {
                                    "default": {},
                                    "description": "Additional custom annotations for the PVC",
                                    "type": "object"
                                },
                                "dataSource": {
                                    "default": {},
                                    "description": "Custom PVC data source",
                                    "type": [
                                        "object",
                                        "string"
                                    ]
                                },
                                "enabled": {
                                    "default": true,
                                    "description": "Enable persistence on Redis&reg; replicas nodes using Persistent Volume Claims",
                                    "type": "boolean"
                                },
                                "existingClaim": {
                                    "default": "",
                                    "description": "Use a existing PVC which must be created manually before bound",
                                    "type": "string"
                                },
                                "labels": {
                                    "default": {},
                                    "description": "Additional custom labels for the PVC",
                                    "type": [
                                        "object",
                                        "string"
                                    ]
                                },
                                "medium": {
                                    "default": "",
                                    "description": "Provide a medium for `emptyDir` volumes.",
                                    "type": "string"
                                },
                                "path": {
                                    "default": "/data",
                                    "description": "The path the volume will be mounted at on Redis&reg; replicas containers",
                                    "type": "string"
                                },
                                "selector": {
                                    "default": {},
                                    "description": "Additional labels to match for the PVC",
                                    "type": [
                                        "object",
                                        "string"
                                    ]
                                },
                                "size": {
                                    "default": "8Gi",
                                    "description": "Persistent Volume size",
                                    "type": "string"
                                },
                                "sizeLimit": {
                                    "default": "",
                                    "description": "Set this to enable a size limit for `emptyDir` volumes.",
                                    "type": "string"
                                },
                                "storageClass": {
                                    "default": "",
                                    "description": "Persistent Volume storage class",
                                    "type": "string"
                                },
                                "subPath": {
                                    "default": "",
                                    "description": "The subdirectory of the volume to mount on Redis&reg; replicas containers",
                                    "type": "string"
                                },
                                "subPathExpr": {
                                    "default": "",
                                    "description": "Used to construct the subPath subdirectory of the volume to mount on Redis&reg; replicas containers",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "persistentVolumeClaimRetentionPolicy": {
                            "properties": {
                                "enabled": {
                                    "default": false,
                                    "description": "Controls if and how PVCs are deleted during the lifecycle of a StatefulSet",
                                    "type": "boolean"
                                },
                                "whenDeleted": {
                                    "default": "Retain",
                                    "description": "Volume retention behavior that applies when the StatefulSet is deleted",
                                    "type": "string"
                                },
                                "whenScaled": {
                                    "default": "Retain",
                                    "description": "Volume retention behavior when the replica count of the StatefulSet is reduced",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "podAffinityPreset": {
                            "default": "",
                            "description": "Pod affinity preset. Ignored if `replica.affinity` is set. Allowed values: `soft` or `hard`",
                            "type": "string"
                        },
                        "podAnnotations": {
                            "default": {},
                            "description": "Annotations for Redis&reg; replicas pods",
                            "type": [
                                "object",
                                "string"
                            ]
                        },
                        "podAntiAffinityPreset": {
                            "default": "soft",
                            "description": "Pod anti-affinity preset. Ignored if `replica.affinity` is set. Allowed values: `soft` or `hard`",
                            "type": "string"
                        },
                        "podLabels": {
                            "default": {},
                            "description": "Extra labels for Redis&reg; replicas pods",
                            "type": "object"
                        },
                        "podManagementPolicy": {
                            "default": "",
                            "description": "podManagementPolicy to manage scaling operation of %%MAIN_CONTAINER_NAME%% pods",
                            "type": "string"
                        },
                        "podSecurityContext": {
                            "properties": {
                                "enabled": {
                                    "default": true,
                                    "description": "Enabled Redis&reg; replicas pods' Security Context",
                                    "type": "boolean"
                                },
                                "fsGroup": {
                                    "default": 1001,
                                    "description": "Set Redis&reg; replicas pod's Security Context fsGroup",
                                    "type": "number"
                                },
                                "fsGroupChangePolicy": {
                                    "default": "Always",
                                    "description": "Set filesystem group change policy",
                                    "type": "string"
                                },
                                "supplementalGroups": {
                                    "default": [],
                                    "description": "Set filesystem extra groups",
                                    "items": {},
                                    "type": "array"
                                },
                                "sysctls": {
                                    "default": [],
                                    "description": "Set kernel settings using the sysctl interface",
                                    "items": {},
                                    "type": "array"
                                }
                            },
                            "type": "object"
                        },
                        "preExecCmds": {
                            "default": [],
                            "description": "Additional commands to run prior to starting Redis&reg; replicas",
                            "items": {},
                            "type": "array"
                        },
                        "priorityClassName": {
                            "default": "",
                            "description": "Redis&reg; replicas pods' priorityClassName",
                            "type": "string"
                        },
                        "readinessProbe": {
                            "properties": {
                                "enabled": {
                                    "default": true,
                                    "description": "Enable readinessProbe on Redis&reg; replicas nodes",
                                    "type": "boolean"
                                },
                                "failureThreshold": {
                                    "default": 5,
                                    "description": "Failure threshold for readinessProbe",
                                    "type": "number"
                                },
                                "initialDelaySeconds": {
                                    "default": 20,
                                    "description": "Initial delay seconds for readinessProbe",
                                    "type": "number"
                                },
                                "periodSeconds": {
                                    "default": 5,
                                    "description": "Period seconds for readinessProbe",
                                    "type": "number"
                                },
                                "successThreshold": {
                                    "default": 1,
                                    "description": "Success threshold for readinessProbe",
                                    "type": "number"
                                },
                                "timeoutSeconds": {
                                    "default": 1,
                                    "description": "Timeout seconds for readinessProbe",
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        "replicaCount": {
                            "default": 3,
                            "description": "Number of Redis&reg; replicas to deploy",
                            "type": "number"
                        },
                        "resources": {
                            "default": {},
                            "description": "Set container requests and limits for different resources like CPU or memory (essential for production workloads)",
                            "type": "object"
                        },
                        "resourcesPreset": {
                            "default": "nano",
                            "description": "Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if replica.resources is set (replica.resources is recommended for production).",
                            "type": "string"
                        },
                        "revisionHistoryLimit": {
                            "default": 10,
                            "description": "The number of old history to retain to allow rollback",
                            "type": "number"
                        },
                        "schedulerName": {
                            "default": "",
                            "description": "Alternate scheduler for Redis&reg; replicas pods",
                            "type": "string"
                        },
                        "service": {
                            "properties": {
                                "annotations": {
                                    "default": {},
                                    "description": "Additional custom annotations for Redis&reg; replicas service",
                                    "type": [
                                        "object",
                                        "string"
                                    ]
                                },
                                "clusterIP": {
                                    "default": "",
                                    "description": "Redis&reg; replicas service Cluster IP",
                                    "type": "string"
                                },
                                "externalTrafficPolicy": {
                                    "default": "Cluster",
                                    "description": "Redis&reg; replicas service external traffic policy",
                                    "type": "string"
                                },
                                "extraPorts": {
                                    "default": [],
                                    "description": "Extra ports to expose (normally used with the `sidecar` value)",
                                    "items": {},
                                    "type": [
                                        "array",
                                        "string"
                                    ]
                                },
                                "internalTrafficPolicy": {
                                    "default": "Cluster",
                                    "description": "Redis&reg; replicas service internal traffic policy (requires Kubernetes v1.22 or greater to be usable)",
                                    "type": "string"
                                },
                                "loadBalancerClass": {
                                    "default": "",
                                    "description": "replicas service Load Balancer class if service type is `LoadBalancer` (optional, cloud specific)",
                                    "type": "string"
                                },
                                "loadBalancerIP": {
                                    "default": "",
                                    "description": "Redis&reg; replicas service Load Balancer IP",
                                    "type": "string"
                                },
                                "loadBalancerSourceRanges": {
                                    "default": [],
                                    "description": "Redis&reg; replicas service Load Balancer sources",
                                    "items": {},
                                    "type": "array"
                                },
                                "nodePorts": {
                                    "properties": {
                                        "redis": {
                                            "default": "",
                                            "description": "Node port for Redis&reg; replicas",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "ports": {
                                    "properties": {
                                        "redis": {
                                            "default": 6379,
                                            "description": "Redis&reg; replicas service port",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "sessionAffinity": {
                                    "default": "None",
                                    "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                                    "type": "string"
                                },
                                "sessionAffinityConfig": {
                                    "default": {},
                                    "description": "Additional settings for the sessionAffinity",
                                    "type": [
                                        "object",
                                        "string"
                                    ]
                                },
                                "type": {
                                    "default": "ClusterIP",
                                    "description": "Redis&reg; replicas service type",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "serviceAccount": {
                            "properties": {
                                "annotations": {
                                    "default": {},
                                    "description": "Additional custom annotations for the ServiceAccount",
                                    "type": [
                                        "object",
                                        "string"
                                    ]
                                },
                                "automountServiceAccountToken": {
                                    "default": false,
                                    "description": "Whether to auto mount the service account token",
                                    "type": "boolean"
                                },
                                "create": {
                                    "default": true,
                                    "description": "Specifies whether a ServiceAccount should be created",
                                    "type": "boolean"
                                },
                                "name": {
                                    "default": "",
                                    "description": "The name of the ServiceAccount to use.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "shareProcessNamespace": {
                            "default": false,
                            "description": "Share a single process namespace between all of the containers in Redis&reg; replicas pods",
                            "type": "boolean"
                        },
                        "sidecars": {
                            "default": [],
                            "description": "Add additional sidecar containers to the Redis&reg; replicas pod(s)",
                            "items": {},
                            "type": [
                                "array",
                                "string"
                            ]
                        },
                        "startupProbe": {
                            "properties": {
                                "enabled": {
                                    "default": true,
                                    "description": "Enable startupProbe on Redis&reg; replicas nodes",
                                    "type": "boolean"
                                },
                                "failureThreshold": {
                                    "default": 22,
                                    "description": "Failure threshold for startupProbe",
                                    "type": "number"
                                },
                                "initialDelaySeconds": {
                                    "default": 10,
                                    "description": "Initial delay seconds for startupProbe",
                                    "type": "number"
                                },
                                "periodSeconds": {
                                    "default": 10,
                                    "description": "Period seconds for startupProbe",
                                    "type": "number"
                                },
                                "successThreshold": {
                                    "default": 1,
                                    "description": "Success threshold for startupProbe",
                                    "type": "number"
                                },
                                "timeoutSeconds": {
                                    "default": 5,
                                    "description": "Timeout seconds for startupProbe",
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        "terminationGracePeriodSeconds": {
                            "default": 30,
                            "description": "Integer setting the termination grace period for the redis-replicas pods",
                            "type": "number"
                        },
                        "tolerations": {
                            "default": [],
                            "description": "Tolerations for Redis&reg; replicas pods assignment",
                            "items": {},
                            "type": [
                                "array",
                                "string"
                            ]
                        },
                        "topologySpreadConstraints": {
                            "default": [],
                            "description": "Spread Constraints for Redis&reg; replicas pod assignment",
                            "items": {},
                            "type": [
                                "array",
                                "string"
                            ]
                        },
                        "updateStrategy": {
                            "properties": {
                                "type": {
                                    "default": "RollingUpdate",
                                    "description": "Redis&reg; replicas statefulset strategy type",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "secretAnnotations": {
                    "default": {},
                    "description": "Annotations to add to secret",
                    "type": [
                        "object",
                        "string"
                    ]
                },
                "sentinel": {
                    "properties": {
                        "annotations": {
                            "default": {},
                            "description": "Additional custom annotations for Redis&reg; Sentinel resource",
                            "type": [
                                "object",
                                "string"
                            ]
                        },
                        "args": {
                            "default": [],
                            "description": "Override default container args (useful when using custom images)",
                            "items": {},
                            "type": [
                                "array",
                                "string"
                            ]
                        },
                        "automateClusterRecovery": {
                            "default": false,
                            "description": "Automate cluster recovery in cases where the last replica is not considered a good replica and Sentinel won't automatically failover to it.",
                            "type": "boolean"
                        },
                        "command": {
                            "default": [],
                            "description": "Override default container command (useful when using custom images)",
                            "items": {},
                            "type": [
                                "array",
                                "string"
                            ]
                        },
                        "configuration": {
                            "default": "",
                            "description": "Configuration for Redis&reg; Sentinel nodes",
                            "type": "string"
                        },
                        "containerPorts": {
                            "properties": {
                                "sentinel": {
                                    "default": 26379,
                                    "description": "Container port to open on Redis&reg; Sentinel nodes",
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        "containerSecurityContext": {
                            "properties": {
                                "allowPrivilegeEscalation": {
                                    "default": false,
                                    "description": "Set Redis&reg; Sentinel containers' Security Context allowPrivilegeEscalation",
                                    "type": "boolean"
                                },
                                "capabilities": {
                                    "properties": {
                                        "drop": {
                                            "default": [
                                                "ALL"
                                            ],
                                            "description": "Set Redis&reg; Sentinel containers' Security Context capabilities to drop",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                },
                                "enabled": {
                                    "default": true,
                                    "description": "Enabled Redis&reg; Sentinel containers' Security Context",
                                    "type": "boolean"
                                },
                                "readOnlyRootFilesystem": {
                                    "default": true,
                                    "description": "Set container's Security Context read-only root filesystem",
                                    "type": "boolean"
                                },
                                "runAsGroup": {
                                    "default": 1001,
                                    "description": "Set Redis&reg; Sentinel containers' Security Context runAsGroup",
                                    "type": "number"
                                },
                                "runAsNonRoot": {
                                    "default": true,
                                    "description": "Set Redis&reg; Sentinel containers' Security Context runAsNonRoot",
                                    "type": "boolean"
                                },
                                "runAsUser": {
                                    "default": 1001,
                                    "description": "Set Redis&reg; Sentinel containers' Security Context runAsUser",
                                    "type": "number"
                                },
                                "seccompProfile": {
                                    "properties": {
                                        "type": {
                                            "default": "RuntimeDefault",
                                            "description": "Set Redis&reg; Sentinel containers' Security Context seccompProfile",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "customLivenessProbe": {
                            "default": {},
                            "description": "Custom livenessProbe that overrides the default one",
                            "type": [
                                "object",
                                "string"
                            ]
                        },
                        "customReadinessProbe": {
                            "default": {},
                            "description": "Custom readinessProbe that overrides the default one",
                            "type": [
                                "object",
                                "string"
                            ]
                        },
                        "customStartupProbe": {
                            "default": {},
                            "description": "Custom startupProbe that overrides the default one",
                            "type": [
                                "object",
                                "string"
                            ]
                        },
                        "downAfterMilliseconds": {
                            "default": 60000,
                            "description": "Timeout for detecting a Redis&reg; node is down",
                            "type": "number"
                        },
                        "enableServiceLinks": {
                            "default": true,
                            "description": "Whether information about services should be injected into pod's environment variable",
                            "type": "boolean"
                        },
                        "enabled": {
                            "default": false,
                            "description": "Use Redis&reg; Sentinel on Redis&reg; pods.",
                            "type": "boolean"
                        },
                        "externalMaster": {
                            "properties": {
                                "enabled": {
                                    "default": false,
                                    "description": "Use external master for bootstrapping",
                                    "type": "boolean"
                                },
                                "host": {
                                    "default": "",
                                    "description": "External master host to bootstrap from",
                                    "type": "string"
                                },
                                "port": {
                                    "default": 6379,
                                    "description": "Port for Redis service external master host",
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        "extraEnvVars": {
                            "default": [],
                            "description": "Array with extra environment variables to add to Redis&reg; Sentinel nodes",
                            "items": {},
                            "type": [
                                "array",
                                "string"
                            ]
                        },
                        "extraEnvVarsCM": {
                            "default": "",
                            "description": "Name of existing ConfigMap containing extra env vars for Redis&reg; Sentinel nodes",
                            "type": "string"
                        },
                        "extraEnvVarsSecret": {
                            "default": "",
                            "description": "Name of existing Secret containing extra env vars for Redis&reg; Sentinel nodes",
                            "type": "string"
                        },
                        "extraVolumeMounts": {
                            "default": [],
                            "description": "Optionally specify extra list of additional volumeMounts for the Redis&reg; Sentinel container(s)",
                            "items": {},
                            "type": [
                                "array",
                                "string"
                            ]
                        },
                        "extraVolumes": {
                            "default": [],
                            "description": "Optionally specify extra list of additional volumes for the Redis&reg; Sentinel",
                            "items": {},
                            "type": [
                                "array",
                                "string"
                            ]
                        },
                        "failoverTimeout": {
                            "default": 180000,
                            "description": "Timeout for performing a election failover",
                            "type": "number"
                        },
                        "getMasterTimeout": {
                            "default": 90,
                            "description": "Amount of time to allow before get_sentinel_master_info() times out.",
                            "type": "number"
                        },
                        "image": {
                            "properties": {
                                "debug": {
                                    "default": false,
                                    "description": "Enable image debug mode",
                                    "type": "boolean"
                                },
                                "digest": {
                                    "default": "",
                                    "description": "Redis&reg; Sentinel image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                                    "type": "string"
                                },
                                "pullPolicy": {
                                    "default": "IfNotPresent",
                                    "description": "Redis&reg; Sentinel image pull policy",
                                    "type": "string"
                                },
                                "pullSecrets": {
                                    "default": [],
                                    "description": "Redis&reg; Sentinel image pull secrets",
                                    "items": {},
                                    "type": "array"
                                },
                                "registry": {
                                    "default": "REGISTRY_NAME",
                                    "description": "Redis&reg; Sentinel image registry",
                                    "type": "string"
                                },
                                "repository": {
                                    "default": "REPOSITORY_NAME/redis-sentinel",
                                    "description": "Redis&reg; Sentinel image repository",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "lifecycleHooks": {
                            "default": {},
                            "description": "for the Redis&reg; sentinel container(s) to automate configuration before or after startup",
                            "type": [
                                "object",
                                "string"
                            ]
                        },
                        "livenessProbe": {
                            "properties": {
                                "enabled": {
                                    "default": true,
                                    "description": "Enable livenessProbe on Redis&reg; Sentinel nodes",
                                    "type": "boolean"
                                },
                                "failureThreshold": {
                                    "default": 6,
                                    "description": "Failure threshold for livenessProbe",
                                    "type": "number"
                                },
                                "initialDelaySeconds": {
                                    "default": 20,
                                    "description": "Initial delay seconds for livenessProbe",
                                    "type": "number"
                                },
                                "periodSeconds": {
                                    "default": 10,
                                    "description": "Period seconds for livenessProbe",
                                    "type": "number"
                                },
                                "successThreshold": {
                                    "default": 1,
                                    "description": "Success threshold for livenessProbe",
                                    "type": "number"
                                },
                                "timeoutSeconds": {
                                    "default": 5,
                                    "description": "Timeout seconds for livenessProbe",
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        "masterService": {
                            "properties": {
                                "annotations": {
                                    "default": {},
                                    "description": "Additional custom annotations for Redis&reg; master service",
                                    "type": "object"
                                },
                                "clusterIP": {
                                    "default": "",
                                    "description": "Redis&reg; master service Cluster IP",
                                    "type": "string"
                                },
                                "enabled": {
                                    "default": false,
                                    "description": "Enable master service pointing to the current master (experimental)",
                                    "type": "boolean"
                                },
                                "externalTrafficPolicy": {
                                    "default": "",
                                    "description": "Redis&reg; master service external traffic policy",
                                    "type": "string"
                                },
                                "extraPorts": {
                                    "default": [],
                                    "description": "Extra ports to expose (normally used with the `sidecar` value)",
                                    "items": {},
                                    "type": [
                                        "array",
                                        "string"
                                    ]
                                },
                                "loadBalancerClass": {
                                    "default": "",
                                    "description": "master service Load Balancer class if service type is `LoadBalancer` (optional, cloud specific)",
                                    "type": "string"
                                },
                                "loadBalancerIP": {
                                    "default": "",
                                    "description": "Redis&reg; master service Load Balancer IP",
                                    "type": "string"
                                },
                                "loadBalancerSourceRanges": {
                                    "default": [],
                                    "description": "Redis&reg; master service Load Balancer sources",
                                    "items": {},
                                    "type": "array"
                                },
                                "nodePorts": {
                                    "properties": {
                                        "redis": {
                                            "default": "",
                                            "description": "Node port for Redis&reg;",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "ports": {
                                    "properties": {
                                        "redis": {
                                            "default": 6379,
                                            "description": "Redis&reg; service port for Redis&reg;",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "sessionAffinity": {
                                    "default": "None",
                                    "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                                    "type": "string"
                                },
                                "sessionAffinityConfig": {
                                    "default": {},
                                    "description": "Additional settings for the sessionAffinity",
                                    "type": [
                                        "object",
                                        "string"
                                    ]
                                },
                                "type": {
                                    "default": "ClusterIP",
                                    "description": "Redis&reg; Sentinel master service type",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "masterSet": {
                            "default": "mymaster",
                            "description": "Master set name",
                            "type": "string"
                        },
                        "parallelSyncs": {
                            "default": 1,
                            "description": "Number of replicas that can be reconfigured in parallel to use the new master after a failover",
                            "type": "number"
                        },
                        "persistence": {
                            "properties": {
                                "accessModes": {
                                    "default": [
                                        "ReadWriteOnce"
                                    ],
                                    "description": "Persistent Volume access modes",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "annotations": {
                                    "default": {},
                                    "description": "Additional custom annotations for the PVC",
                                    "type": "object"
                                },
                                "dataSource": {
                                    "default": {},
                                    "description": "Custom PVC data source",
                                    "type": [
                                        "object",
                                        "string"
                                    ]
                                },
                                "enabled": {
                                    "default": false,
                                    "description": "Enable persistence on Redis&reg; sentinel nodes using Persistent Volume Claims (Experimental)",
                                    "type": "boolean"
                                },
                                "labels": {
                                    "default": {},
                                    "description": "Additional custom labels for the PVC",
                                    "type": [
                                        "object",
                                        "string"
                                    ]
                                },
                                "medium": {
                                    "default": "",
                                    "description": "Provide a medium for `emptyDir` volumes.",
                                    "type": "string"
                                },
                                "selector": {
                                    "default": {},
                                    "description": "Additional labels to match for the PVC",
                                    "type": [
                                        "object",
                                        "string"
                                    ]
                                },
                                "size": {
                                    "default": "100Mi",
                                    "description": "Persistent Volume size",
                                    "type": "string"
                                },
                                "sizeLimit": {
                                    "default": "",
                                    "description": "Set this to enable a size limit for `emptyDir` volumes.",
                                    "type": "string"
                                },
                                "storageClass": {
                                    "default": "",
                                    "description": "Persistent Volume storage class",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "persistentVolumeClaimRetentionPolicy": {
                            "properties": {
                                "enabled": {
                                    "default": false,
                                    "description": "Controls if and how PVCs are deleted during the lifecycle of a StatefulSet",
                                    "type": "boolean"
                                },
                                "whenDeleted": {
                                    "default": "Retain",
                                    "description": "Volume retention behavior that applies when the StatefulSet is deleted",
                                    "type": "string"
                                },
                                "whenScaled": {
                                    "default": "Retain",
                                    "description": "Volume retention behavior when the replica count of the StatefulSet is reduced",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "preExecCmds": {
                            "default": [],
                            "description": "Additional commands to run prior to starting Redis&reg; Sentinel",
                            "items": {},
                            "type": "array"
                        },
                        "quorum": {
                            "default": 2,
                            "description": "Sentinel Quorum",
                            "type": "number"
                        },
                        "readinessProbe": {
                            "properties": {
                                "enabled": {
                                    "default": true,
                                    "description": "Enable readinessProbe on Redis&reg; Sentinel nodes",
                                    "type": "boolean"
                                },
                                "failureThreshold": {
                                    "default": 6,
                                    "description": "Failure threshold for readinessProbe",
                                    "type": "number"
                                },
                                "initialDelaySeconds": {
                                    "default": 20,
                                    "description": "Initial delay seconds for readinessProbe",
                                    "type": "number"
                                },
                                "periodSeconds": {
                                    "default": 5,
                                    "description": "Period seconds for readinessProbe",
                                    "type": "number"
                                },
                                "successThreshold": {
                                    "default": 1,
                                    "description": "Success threshold for readinessProbe",
                                    "type": "number"
                                },
                                "timeoutSeconds": {
                                    "default": 1,
                                    "description": "Timeout seconds for readinessProbe",
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        "redisShutdownWaitFailover": {
                            "default": true,
                            "description": "Whether the Redis&reg; master container waits for the failover at shutdown (in addition to the Redis&reg; Sentinel container).",
                            "type": "boolean"
                        },
                        "resources": {
                            "default": {},
                            "description": "Set container requests and limits for different resources like CPU or memory (essential for production workloads)",
                            "type": "object"
                        },
                        "resourcesPreset": {
                            "default": "nano",
                            "description": "Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if sentinel.resources is set (sentinel.resources is recommended for production).",
                            "type": "string"
                        },
                        "service": {
                            "properties": {
                                "annotations": {
                                    "default": {},
                                    "description": "Additional custom annotations for Redis&reg; Sentinel service",
                                    "type": [
                                        "object",
                                        "string"
                                    ]
                                },
                                "clusterIP": {
                                    "default": "",
                                    "description": "Redis&reg; Sentinel service Cluster IP",
                                    "type": "string"
                                },
                                "createMaster": {
                                    "default": false,
                                    "description": "Enable master service pointing to the current master (experimental)",
                                    "type": "boolean"
                                },
                                "externalTrafficPolicy": {
                                    "default": "Cluster",
                                    "description": "Redis&reg; Sentinel service external traffic policy",
                                    "type": "string"
                                },
                                "extraPorts": {
                                    "default": [],
                                    "description": "Extra ports to expose (normally used with the `sidecar` value)",
                                    "items": {},
                                    "type": [
                                        "array",
                                        "string"
                                    ]
                                },
                                "headless": {
                                    "properties": {
                                        "annotations": {
                                            "default": {},
                                            "description": "Annotations for the headless service.",
                                            "type": [
                                                "object",
                                                "string"
                                            ]
                                        },
                                        "extraPorts": {
                                            "default": [],
                                            "description": "Extra ports to expose for the headless service",
                                            "items": {},
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                },
                                "loadBalancerClass": {
                                    "default": "",
                                    "description": "sentinel service Load Balancer class if service type is `LoadBalancer` (optional, cloud specific)",
                                    "type": "string"
                                },
                                "loadBalancerIP": {
                                    "default": "",
                                    "description": "Redis&reg; Sentinel service Load Balancer IP",
                                    "type": "string"
                                },
                                "loadBalancerSourceRanges": {
                                    "default": [],
                                    "description": "Redis&reg; Sentinel service Load Balancer sources",
                                    "items": {},
                                    "type": "array"
                                },
                                "nodePorts": {
                                    "properties": {
                                        "redis": {
                                            "default": "",
                                            "description": "Node port for Redis&reg;",
                                            "type": "string"
                                        },
                                        "sentinel": {
                                            "default": "",
                                            "description": "Node port for Sentinel",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "ports": {
                                    "properties": {
                                        "redis": {
                                            "default": 6379,
                                            "description": "Redis&reg; service port for Redis&reg;",
                                            "type": "number"
                                        },
                                        "sentinel": {
                                            "default": 26379,
                                            "description": "Redis&reg; service port for Redis&reg; Sentinel",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "sessionAffinity": {
                                    "default": "None",
                                    "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                                    "type": "string"
                                },
                                "sessionAffinityConfig": {
                                    "default": {},
                                    "description": "Additional settings for the sessionAffinity",
                                    "type": [
                                        "object",
                                        "string"
                                    ]
                                },
                                "type": {
                                    "default": "ClusterIP",
                                    "description": "Redis&reg; Sentinel service type",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "startupProbe": {
                            "properties": {
                                "enabled": {
                                    "default": true,
                                    "description": "Enable startupProbe on Redis&reg; Sentinel nodes",
                                    "type": "boolean"
                                },
                                "failureThreshold": {
                                    "default": 22,
                                    "description": "Failure threshold for startupProbe",
                                    "type": "number"
                                },
                                "initialDelaySeconds": {
                                    "default": 10,
                                    "description": "Initial delay seconds for startupProbe",
                                    "type": "number"
                                },
                                "periodSeconds": {
                                    "default": 10,
                                    "description": "Period seconds for startupProbe",
                                    "type": "number"
                                },
                                "successThreshold": {
                                    "default": 1,
                                    "description": "Success threshold for startupProbe",
                                    "type": "number"
                                },
                                "timeoutSeconds": {
                                    "default": 5,
                                    "description": "Timeout seconds for startupProbe",
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        "terminationGracePeriodSeconds": {
                            "default": 30,
                            "description": "Integer setting the termination grace period for the redis-node pods",
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                "serviceAccount": {
                    "properties": {
                        "annotations": {
                            "default": {},
                            "description": "Additional custom annotations for the ServiceAccount",
                            "type": [
                                "object",
                                "string"
                            ]
                        },
                        "automountServiceAccountToken": {
                            "default": false,
                            "description": "Whether to auto mount the service account token",
                            "type": "boolean"
                        },
                        "create": {
                            "default": true,
                            "description": "Specifies whether a ServiceAccount should be created",
                            "type": "boolean"
                        },
                        "name": {
                            "default": "",
                            "description": "The name of the ServiceAccount to use.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "serviceBindings": {
                    "properties": {
                        "enabled": {
                            "default": false,
                            "description": "Create secret for service binding (Experimental)",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "sysctl": {
                    "properties": {
                        "command": {
                            "default": [],
                            "description": "Override default init-sysctl container command (useful when using custom images)",
                            "items": {},
                            "type": [
                                "array",
                                "string"
                            ]
                        },
                        "enabled": {
                            "default": false,
                            "description": "Enable init container to modify Kernel settings",
                            "type": "boolean"
                        },
                        "image": {
                            "properties": {
                                "digest": {
                                    "default": "",
                                    "description": "OS Shell + Utility image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                                    "type": "string"
                                },
                                "pullPolicy": {
                                    "default": "IfNotPresent",
                                    "description": "OS Shell + Utility image pull policy",
                                    "type": "string"
                                },
                                "pullSecrets": {
                                    "default": [],
                                    "description": "OS Shell + Utility image pull secrets",
                                    "items": {},
                                    "type": "array"
                                },
                                "registry": {
                                    "default": "REGISTRY_NAME",
                                    "description": "OS Shell + Utility image registry",
                                    "type": "string"
                                },
                                "repository": {
                                    "default": "REPOSITORY_NAME/os-shell",
                                    "description": "OS Shell + Utility image repository",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "mountHostSys": {
                            "default": false,
                            "description": "Mount the host `/sys` folder to `/host-sys`",
                            "type": "boolean"
                        },
                        "resources": {
                            "default": {},
                            "description": "Set container requests and limits for different resources like CPU or memory (essential for production workloads)",
                            "type": "object"
                        },
                        "resourcesPreset": {
                            "default": "nano",
                            "description": "Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if sysctl.resources is set (sysctl.resources is recommended for production).",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "tls": {
                    "properties": {
                        "authClients": {
                            "default": true,
                            "description": "Require clients to authenticate",
                            "type": "boolean"
                        },
                        "autoGenerated": {
                            "default": false,
                            "description": "Enable autogenerated certificates",
                            "type": "boolean"
                        },
                        "certCAFilename": {
                            "default": "",
                            "description": "CA Certificate filename",
                            "type": "string"
                        },
                        "certFilename": {
                            "default": "",
                            "description": "Certificate filename",
                            "type": "string"
                        },
                        "certKeyFilename": {
                            "default": "",
                            "description": "Certificate Key filename",
                            "type": "string"
                        },
                        "certificatesSecret": {
                            "default": "",
                            "description": "DEPRECATED. Use existingSecret instead.",
                            "type": "string"
                        },
                        "dhParamsFilename": {
                            "default": "",
                            "description": "File containing DH params (in order to support DH based ciphers)",
                            "type": "string"
                        },
                        "enabled": {
                            "default": false,
                            "description": "Enable TLS traffic",
                            "type": "boolean"
                        },
                        "existingSecret": {
                            "default": "",
                            "description": "The name of the existing secret that contains the TLS certificates",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "useExternalDNS": {
                    "properties": {
                        "additionalAnnotations": {
                            "default": {},
                            "description": "Extra annotations to be utilized when `external-dns` is enabled.",
                            "type": "object"
                        },
                        "annotationKey": {
                            "default": "external-dns.alpha.kubernetes.io/",
                            "description": "The annotation key utilized when `external-dns` is enabled. Setting this to `false` will disable annotations.",
                            "type": "string"
                        },
                        "enabled": {
                            "default": false,
                            "description": "Enable various syntax that would enable external-dns to work.  Note this requires a working installation of `external-dns` to be usable.",
                            "type": "boolean"
                        },
                        "suffix": {
                            "default": "",
                            "description": "The DNS suffix utilized when `external-dns` is enabled.  Note that we prepend the suffix with the full name of the release.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "useHostnames": {
                    "default": true,
                    "description": "Use hostnames internally when announcing replication. If false, the hostname will be resolved to an IP address",
                    "type": "boolean"
                },
                "volumePermissions": {
                    "properties": {
                        "containerSecurityContext": {
                            "properties": {
                                "runAsUser": {
                                    "default": 0,
                                    "description": "Set init container's Security Context runAsUser",
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        "enabled": {
                            "default": false,
                            "description": "Enable init container that changes the owner/group of the PV mount point to `runAsUser:fsGroup`",
                            "type": "boolean"
                        },
                        "image": {
                            "properties": {
                                "digest": {
                                    "default": "",
                                    "description": "OS Shell + Utility image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                                    "type": "string"
                                },
                                "pullPolicy": {
                                    "default": "IfNotPresent",
                                    "description": "OS Shell + Utility image pull policy",
                                    "type": "string"
                                },
                                "pullSecrets": {
                                    "default": [],
                                    "description": "OS Shell + Utility image pull secrets",
                                    "items": {},
                                    "type": "array"
                                },
                                "registry": {
                                    "default": "REGISTRY_NAME",
                                    "description": "OS Shell + Utility image registry",
                                    "type": "string"
                                },
                                "repository": {
                                    "default": "REPOSITORY_NAME/os-shell",
                                    "description": "OS Shell + Utility image repository",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "resources": {
                            "default": {},
                            "description": "Set container requests and limits for different resources like CPU or memory (essential for production workloads)",
                            "type": "object"
                        },
                        "resourcesPreset": {
                            "default": "nano",
                            "description": "Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if volumePermissions.resources is set (volumePermissions.resources is recommended for production).",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "sampleApplication": {
            "additionalProperties": false,
            "default": "See below",
            "description": "Sample application deploying a p-d pair of specific model",
            "properties": {
                "baseConfigMapRefName": {
                    "default": "basic-gpu-with-nixl-and-redis-lookup-preset",
                    "description": "Name of the base configMapRef to use <br /> For the available presets see: `templates/modelservice/presets/`",
                    "required": [],
                    "title": "baseConfigMapRefName"
                },
                "decode": {
                    "additionalProperties": false,
                    "properties": {
                        "extraArgs": {
                            "description": "args to add to the decode deployment",
                            "items": {
                                "required": [],
                                "type": "string"
                            },
                            "required": [],
                            "title": "extraArgs"
                        },
                        "replicas": {
                            "default": "1",
                            "description": "number of desired decode replicas",
                            "required": [],
                            "title": "replicas"
                        },
                        "runtimeClassName": {
                            "default": "",
                            "description": "runtimeClassName for the decode pods",
                            "required": [],
                            "title": "runtimeClassName"
                        }
                    },
                    "required": [],
                    "title": "decode",
                    "type": "object"
                },
                "enabled": {
                    "default": "true",
                    "description": "Enable rendering of sample application resources",
                    "required": [],
                    "title": "enabled"
                },
                "endpointPicker": {
                    "additionalProperties": false,
                    "properties": {
                        "env": {
                            "description": "Apply additional env variables to the endpoint picker deployment <br /> Ref: https://github.com/neuralmagic/llm-d-inference-scheduler/blob/0.0.2/docs/architecture.md",
                            "items": {
                                "description": "EnvVar represents an environment variable present in a Container.",
                                "properties": {
                                    "name": {
                                        "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                                        "type": "string"
                                    },
                                    "value": {
                                        "description": "Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
                                        "type": "string"
                                    },
                                    "valueFrom": {
                                        "description": "EnvVarSource represents a source for the value of an EnvVar.",
                                        "properties": {
                                            "configMapKeyRef": {
                                                "description": "Selects a key from a ConfigMap.",
                                                "properties": {
                                                    "key": {
                                                        "description": "The key to select.",
                                                        "type": "string"
                                                    },
                                                    "name": {
                                                        "description": "Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                                        "type": "string"
                                                    },
                                                    "optional": {
                                                        "description": "Specify whether the ConfigMap or its key must be defined",
                                                        "type": "boolean"
                                                    }
                                                },
                                                "required": [
                                                    "key"
                                                ],
                                                "type": "object",
                                                "x-kubernetes-map-type": "atomic"
                                            },
                                            "fieldRef": {
                                                "description": "ObjectFieldSelector selects an APIVersioned field of an object.",
                                                "properties": {
                                                    "apiVersion": {
                                                        "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                                        "type": "string"
                                                    },
                                                    "fieldPath": {
                                                        "description": "Path of the field to select in the specified API version.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "fieldPath"
                                                ],
                                                "type": "object",
                                                "x-kubernetes-map-type": "atomic"
                                            },
                                            "resourceFieldRef": {
                                                "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
                                                "properties": {
                                                    "containerName": {
                                                        "description": "Container name: required for volumes, optional for env vars",
                                                        "type": "string"
                                                    },
                                                    "divisor": {
                                                        "oneOf": [
                                                            {
                                                                "type": "string"
                                                            },
                                                            {
                                                                "type": "number"
                                                            }
                                                        ]
                                                    },
                                                    "resource": {
                                                        "description": "Required: resource to select",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "resource"
                                                ],
                                                "type": "object",
                                                "x-kubernetes-map-type": "atomic"
                                            },
                                            "secretKeyRef": {
                                                "description": "SecretKeySelector selects a key of a Secret.",
                                                "properties": {
                                                    "key": {
                                                        "description": "The key of the secret to select from.  Must be a valid secret key.",
                                                        "type": "string"
                                                    },
                                                    "name": {
                                                        "description": "Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                                        "type": "string"
                                                    },
                                                    "optional": {
                                                        "description": "Specify whether the Secret or its key must be defined",
                                                        "type": "boolean"
                                                    }
                                                },
                                                "required": [
                                                    "key"
                                                ],
                                                "type": "object",
                                                "x-kubernetes-map-type": "atomic"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "name"
                                ],
                                "type": "object"
                            },
                            "required": [],
                            "title": "env"
                        }
                    },
                    "required": [],
                    "title": "endpointPicker",
                    "type": "object"
                },
                "inferencePoolPort": {
                    "default": "8000",
                    "description": "InferencePool port configuration",
                    "required": [],
                    "title": "inferencePoolPort"
                },
                "model": {
                    "additionalProperties": false,
                    "properties": {
                        "auth": {
                            "additionalProperties": false,
                            "properties": {
                                "hfToken": {
                                    "additionalProperties": false,
                                    "description": "HF token auth config via k8s secret.",
                                    "properties": {
                                        "key": {
                                            "default": "HF_TOKEN",
                                            "description": "Key within the secret under which the token is located",
                                            "required": [],
                                            "title": "key"
                                        },
                                        "name": {
                                            "default": "llm-d-hf-token",
                                            "description": "Name of the secret to create to store your huggingface token",
                                            "required": [],
                                            "title": "name"
                                        }
                                    },
                                    "required": [],
                                    "title": "hfToken"
                                }
                            },
                            "required": [],
                            "title": "auth",
                            "type": "object"
                        },
                        "modelArtifactURI": {
                            "default": "hf://meta-llama/Llama-3.2-3B-Instruct",
                            "description": "Fully qualified model artifact location URI <br /> For Hugging Face models use: `hf://<organization>/<repo>` <br /> For models located on PVC use: `pvc://<pvc_name>/<path_to_model>`",
                            "required": [],
                            "title": "modelArtifactURI"
                        },
                        "modelName": {
                            "default": "meta-llama/Llama-3.2-3B-Instruct",
                            "description": "Name of the model",
                            "required": [],
                            "title": "modelName"
                        },
                        "servedModelNames": {
                            "description": "Aliases to the Model named vllm will serve with",
                            "items": {
                                "required": []
                            },
                            "required": [],
                            "title": "servedModelNames"
                        }
                    },
                    "required": [],
                    "title": "model",
                    "type": "object"
                },
                "prefill": {
                    "additionalProperties": false,
                    "properties": {
                        "extraArgs": {
                            "description": "args to add to the prefill deployment",
                            "items": {
                                "required": [],
                                "type": "string"
                            },
                            "required": [],
                            "title": "extraArgs"
                        },
                        "replicas": {
                            "default": "1",
                            "description": "number of desired prefill replicas",
                            "required": [],
                            "title": "replicas"
                        },
                        "runtimeClassName": {
                            "default": "",
                            "description": "runtimeClassName for the prefill pods",
                            "required": [],
                            "title": "runtimeClassName"
                        }
                    },
                    "required": [],
                    "title": "prefill",
                    "type": "object"
                },
                "resources": {
                    "description": "ResourceRequirements describes the compute resource requirements.",
                    "properties": {
                        "claims": {
                            "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.\n\nThis is an alpha field and requires enabling the DynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.",
                            "items": {
                                "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                                "properties": {
                                    "name": {
                                        "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                                        "type": "string"
                                    },
                                    "request": {
                                        "description": "Request is the name chosen for a request in the referenced claim. If empty, everything from the claim is made available, otherwise only the result of this request.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name"
                                ],
                                "type": "object"
                            },
                            "type": "array",
                            "x-kubernetes-list-map-keys": [
                                "name"
                            ],
                            "x-kubernetes-list-type": "map"
                        },
                        "limits": {
                            "additionalProperties": {
                                "oneOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "number"
                                    }
                                ]
                            },
                            "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                            "type": "object"
                        },
                        "requests": {
                            "additionalProperties": {
                                "oneOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "number"
                                    }
                                ]
                            },
                            "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [],
            "title": "sampleApplication"
        },
        "test": {
            "additionalProperties": false,
            "description": "Helm tests",
            "properties": {
                "enabled": {
                    "default": "false",
                    "description": "Enable rendering of helm test resources",
                    "required": [],
                    "title": "enabled"
                },
                "image": {
                    "additionalProperties": false,
                    "description": "See below",
                    "properties": {
                        "imagePullPolicy": {
                            "default": "Always",
                            "description": "Specify a imagePullPolicy",
                            "required": [],
                            "title": "imagePullPolicy"
                        },
                        "pullSecrets": {
                            "description": "Optionally specify an array of imagePullSecrets (evaluated as templates)",
                            "items": {
                                "required": [],
                                "type": "string"
                            },
                            "required": [],
                            "title": "pullSecrets"
                        },
                        "registry": {
                            "default": "quay.io",
                            "description": "Test connection pod image registry",
                            "required": [],
                            "title": "registry"
                        },
                        "repository": {
                            "default": "curl/curl",
                            "description": "Test connection pod image repository. Note that the image needs to have both the `sh` and `curl` binaries in it.",
                            "required": [],
                            "title": "repository"
                        },
                        "tag": {
                            "default": "latest",
                            "description": "Test connection pod image tag. Note that the image needs to have both the `sh` and `curl` binaries in it.",
                            "required": [],
                            "title": "tag"
                        }
                    },
                    "required": [],
                    "title": "image"
                }
            },
            "required": [],
            "title": "test"
        }
    },
    "required": [],
    "type": "object"
}